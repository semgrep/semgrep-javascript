(* Generated by ocaml-tree-sitter. *)

(*
   Disable warning 42:
     "this use of Foo relies on type-directed disambiguation,
     it will not compile with OCaml 4.00 or earlier."
*)
[@@@warning "-42"]

(* Disable warnings against unused variables. *)
[@@@warning "-26-27-32"]

open Tree_sitter_bindings
open Tree_sitter_run

type mt = Run.matcher_token

external create_parser :
  unit -> Tree_sitter_API.ts_parser = "octs_create_parser_javascript"

let parse_source_string ?src_file contents =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_string ?src_file ts_parser contents

let parse_source_file src_file =
  let ts_parser = create_parser () in
  Tree_sitter_parsing.parse_source_file ts_parser src_file

let extras = [
  "comment";
]

let children_regexps : (string * Run.exp option) list = [
  "imm_tok_slash", None;
  "super", None;
  "ternary_qmark", None;
  "comment", None;
  "jsx_identifier", None;
  "hash_bang_line", None;
  "unescaped_double_string_fragment", None;
  "false", None;
  "empty_statement", None;
  "regex_pattern", None;
  "true", None;
  "automatic_semicolon", None;
  "identifier", None;
  "unescaped_single_string_fragment", None;
  "escape_sequence", None;
  "template_chars", None;
  "import", None;
  "number", None;
  "undefined", None;
  "this", None;
  "regex_flags", None;
  "jsx_text", None;
  "private_property_identifier", None;
  "null", None;
  "meta_property",
  Some (
    Seq [
      Token (Literal "new");
      Token (Literal ".");
      Token (Literal "target");
    ];
  );
  "debugger_statement",
  Some (
    Seq [
      Token (Literal "debugger");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "import_export_specifier",
  Some (
    Seq [
      Token (Name "identifier");
      Opt (
        Seq [
          Token (Literal "as");
          Token (Name "identifier");
        ];
      );
    ];
  );
  "jsx_namespace_name",
  Some (
    Seq [
      Alt [|
        Token (Name "jsx_identifier");
        Token (Name "identifier");
      |];
      Token (Literal ":");
      Alt [|
        Token (Name "jsx_identifier");
        Token (Name "identifier");
      |];
    ];
  );
  "nested_identifier",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "nested_identifier");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "continue_statement",
  Some (
    Seq [
      Token (Literal "continue");
      Opt (
        Token (Name "identifier");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "namespace_import_export",
  Some (
    Seq [
      Token (Literal "*");
      Token (Literal "as");
      Token (Name "identifier");
    ];
  );
  "decorator_member_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "decorator_member_expression");
      |];
      Token (Literal ".");
      Token (Name "identifier");
    ];
  );
  "break_statement",
  Some (
    Seq [
      Token (Literal "break");
      Opt (
        Token (Name "identifier");
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "string",
  Some (
    Alt [|
      Seq [
        Token (Literal "\"");
        Repeat (
          Alt [|
            Token (Name "unescaped_double_string_fragment");
            Token (Name "escape_sequence");
          |];
        );
        Token (Literal "\"");
      ];
      Seq [
        Token (Literal "'");
        Repeat (
          Alt [|
            Token (Name "unescaped_single_string_fragment");
            Token (Name "escape_sequence");
          |];
        );
        Token (Literal "'");
      ];
    |];
  );
  "regex",
  Some (
    Seq [
      Token (Literal "/");
      Token (Name "regex_pattern");
      Token (Name "imm_tok_slash");
      Opt (
        Token (Name "regex_flags");
      );
    ];
  );
  "named_imports",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "import_export_specifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "import_export_specifier");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "export_clause",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Token (Name "import_export_specifier");
          Repeat (
            Seq [
              Token (Literal ",");
              Token (Name "import_export_specifier");
            ];
          );
        ];
      );
      Opt (
        Token (Literal ",");
      );
      Token (Literal "}");
    ];
  );
  "jsx_closing_element",
  Some (
    Seq [
      Token (Literal "<");
      Token (Literal "/");
      Alt [|
        Alt [|
          Token (Name "jsx_identifier");
          Token (Name "identifier");
        |];
        Token (Name "nested_identifier");
        Token (Name "jsx_namespace_name");
      |];
      Token (Literal ">");
    ];
  );
  "from_clause",
  Some (
    Seq [
      Token (Literal "from");
      Token (Name "string");
    ];
  );
  "import_clause",
  Some (
    Alt [|
      Token (Name "namespace_import_export");
      Token (Name "named_imports");
      Seq [
        Token (Name "identifier");
        Opt (
          Seq [
            Token (Literal ",");
            Alt [|
              Token (Name "namespace_import_export");
              Token (Name "named_imports");
            |];
          ];
        );
      ];
    |];
  );
  "import_statement",
  Some (
    Seq [
      Token (Literal "import");
      Alt [|
        Seq [
          Token (Name "import_clause");
          Token (Name "from_clause");
        ];
        Token (Name "string");
      |];
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "arguments",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "expression");
              Token (Name "spread_element");
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "expression");
                  Token (Name "spread_element");
                |];
              );
            ];
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "array",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "expression");
              Token (Name "spread_element");
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "expression");
                  Token (Name "spread_element");
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "array_pattern",
  Some (
    Seq [
      Token (Literal "[");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "pattern");
              Token (Name "assignment_pattern");
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "pattern");
                  Token (Name "assignment_pattern");
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "]");
    ];
  );
  "arrow_function",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Alt [|
        Alt [|
          Alt [|
            Token (Literal "get");
            Token (Literal "set");
            Token (Literal "async");
            Token (Literal "static");
            Token (Literal "export");
          |];
          Token (Name "identifier");
        |];
        Token (Name "formal_parameters");
      |];
      Token (Literal "=>");
      Alt [|
        Token (Name "expression");
        Token (Name "statement_block");
      |];
    ];
  );
  "assignment_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "parenthesized_expression");
        Alt [|
          Token (Name "member_expression");
          Token (Name "subscript_expression");
          Alt [|
            Token (Name "undefined");
            Token (Name "identifier");
          |];
          Alt [|
            Token (Literal "get");
            Token (Literal "set");
            Token (Literal "async");
            Token (Literal "static");
            Token (Literal "export");
          |];
          Token (Name "destructuring_pattern");
        |];
      |];
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "assignment_pattern",
  Some (
    Seq [
      Token (Name "pattern");
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "augmented_assignment_expression",
  Some (
    Seq [
      Token (Name "augmented_assignment_lhs");
      Alt [|
        Token (Literal "+=");
        Token (Literal "-=");
        Token (Literal "*=");
        Token (Literal "/=");
        Token (Literal "%=");
        Token (Literal "^=");
        Token (Literal "&=");
        Token (Literal "|=");
        Token (Literal ">>=");
        Token (Literal ">>>=");
        Token (Literal "<<=");
        Token (Literal "**=");
        Token (Literal "&&=");
        Token (Literal "||=");
        Token (Literal "??=");
      |];
      Token (Name "expression");
    ];
  );
  "augmented_assignment_lhs",
  Some (
    Alt [|
      Token (Name "member_expression");
      Token (Name "subscript_expression");
      Alt [|
        Token (Literal "get");
        Token (Literal "set");
        Token (Literal "async");
        Token (Literal "static");
        Token (Literal "export");
      |];
      Token (Name "identifier");
      Token (Name "parenthesized_expression");
    |];
  );
  "await_expression",
  Some (
    Seq [
      Token (Literal "await");
      Token (Name "expression");
    ];
  );
  "binary_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Token (Literal "&&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "||");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">>>");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "&");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "^");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "|");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "+");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "-");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "*");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "/");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "%");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "**");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "<=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "===");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "!==");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">=");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal ">");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "??");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "instanceof");
        Token (Name "expression");
      ];
      Seq [
        Token (Name "expression");
        Token (Literal "in");
        Token (Name "expression");
      ];
    |];
  );
  "call_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Name "arguments");
          Token (Name "template_string");
        |];
      ];
      Seq [
        Token (Name "primary_expression");
        Token (Literal "?.");
        Token (Name "arguments");
      ];
    |];
  );
  "catch_clause",
  Some (
    Seq [
      Token (Literal "catch");
      Opt (
        Seq [
          Token (Literal "(");
          Alt [|
            Token (Name "identifier");
            Token (Name "destructuring_pattern");
          |];
          Token (Literal ")");
        ];
      );
      Token (Name "statement_block");
    ];
  );
  "class",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Token (Literal "class");
      Opt (
        Token (Name "identifier");
      );
      Opt (
        Token (Name "class_heritage");
      );
      Token (Name "class_body");
    ];
  );
  "class_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Seq [
            Token (Name "method_definition");
            Opt (
              Token (Literal ";");
            );
          ];
          Seq [
            Token (Name "field_definition");
            Alt [|
              Token (Name "automatic_semicolon");
              Token (Literal ";");
            |];
          ];
        |];
      );
      Token (Literal "}");
    ];
  );
  "class_declaration",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Token (Literal "class");
      Token (Name "identifier");
      Opt (
        Token (Name "class_heritage");
      );
      Token (Name "class_body");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "class_heritage",
  Some (
    Seq [
      Token (Literal "extends");
      Token (Name "expression");
    ];
  );
  "computed_property_name",
  Some (
    Seq [
      Token (Literal "[");
      Token (Name "expression");
      Token (Literal "]");
    ];
  );
  "declaration",
  Some (
    Alt [|
      Token (Name "function_declaration");
      Token (Name "generator_function_declaration");
      Token (Name "class_declaration");
      Token (Name "lexical_declaration");
      Token (Name "variable_declaration");
    |];
  );
  "decorator",
  Some (
    Seq [
      Token (Literal "@");
      Alt [|
        Token (Name "identifier");
        Token (Name "decorator_member_expression");
        Token (Name "decorator_call_expression");
      |];
    ];
  );
  "decorator_call_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "decorator_member_expression");
      |];
      Token (Name "arguments");
    ];
  );
  "destructuring_pattern",
  Some (
    Alt [|
      Token (Name "object_pattern");
      Token (Name "array_pattern");
    |];
  );
  "do_statement",
  Some (
    Seq [
      Token (Literal "do");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "else_clause",
  Some (
    Seq [
      Token (Literal "else");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
    ];
  );
  "export_statement",
  Some (
    Alt [|
      Seq [
        Token (Literal "export");
        Alt [|
          Seq [
            Token (Literal "*");
            Token (Name "from_clause");
            Alt [|
              Token (Name "automatic_semicolon");
              Token (Literal ";");
            |];
          ];
          Seq [
            Token (Name "namespace_import_export");
            Token (Name "from_clause");
            Alt [|
              Token (Name "automatic_semicolon");
              Token (Literal ";");
            |];
          ];
          Seq [
            Token (Name "export_clause");
            Token (Name "from_clause");
            Alt [|
              Token (Name "automatic_semicolon");
              Token (Literal ";");
            |];
          ];
          Seq [
            Token (Name "export_clause");
            Alt [|
              Token (Name "automatic_semicolon");
              Token (Literal ";");
            |];
          ];
        |];
      ];
      Seq [
        Repeat (
          Token (Name "decorator");
        );
        Token (Literal "export");
        Alt [|
          Token (Name "declaration");
          Seq [
            Token (Literal "default");
            Alt [|
              Token (Name "declaration");
              Seq [
                Token (Name "expression");
                Alt [|
                  Token (Name "automatic_semicolon");
                  Token (Literal ";");
                |];
              ];
            |];
          ];
        |];
      ];
    |];
  );
  "expression",
  Some (
    Alt [|
      Token (Name "primary_expression");
      Alt [|
        Token (Name "jsx_element");
        Token (Name "jsx_self_closing_element");
      |];
      Token (Name "jsx_fragment");
      Token (Name "assignment_expression");
      Token (Name "augmented_assignment_expression");
      Token (Name "await_expression");
      Token (Name "unary_expression");
      Token (Name "binary_expression");
      Token (Name "ternary_expression");
      Token (Name "update_expression");
      Token (Name "new_expression");
      Token (Name "yield_expression");
    |];
  );
  "expression_statement",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "field_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Opt (
        Token (Literal "static");
      );
      Token (Name "property_name");
      Opt (
        Token (Name "initializer");
      );
    ];
  );
  "finally_clause",
  Some (
    Seq [
      Token (Literal "finally");
      Token (Name "statement_block");
    ];
  );
  "for_header",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Alt [|
          Alt [|
            Token (Name "member_expression");
            Token (Name "subscript_expression");
            Alt [|
              Token (Name "undefined");
              Token (Name "identifier");
            |];
            Alt [|
              Token (Literal "get");
              Token (Literal "set");
              Token (Literal "async");
              Token (Literal "static");
              Token (Literal "export");
            |];
            Token (Name "destructuring_pattern");
          |];
          Token (Name "parenthesized_expression");
        |];
        Seq [
          Token (Literal "var");
          Alt [|
            Token (Name "identifier");
            Token (Name "destructuring_pattern");
          |];
          Opt (
            Token (Name "initializer");
          );
        ];
        Seq [
          Alt [|
            Token (Literal "let");
            Token (Literal "const");
          |];
          Alt [|
            Token (Name "identifier");
            Token (Name "destructuring_pattern");
          |];
        ];
      |];
      Alt [|
        Token (Literal "in");
        Token (Literal "of");
      |];
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal ")");
    ];
  );
  "for_in_statement",
  Some (
    Seq [
      Token (Literal "for");
      Opt (
        Token (Literal "await");
      );
      Token (Name "for_header");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
    ];
  );
  "for_statement",
  Some (
    Seq [
      Token (Literal "for");
      Token (Literal "(");
      Alt [|
        Token (Name "lexical_declaration");
        Token (Name "variable_declaration");
        Token (Name "expression_statement");
        Token (Name "empty_statement");
      |];
      Alt [|
        Token (Name "expression_statement");
        Token (Name "empty_statement");
      |];
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "sequence_expression");
        |];
      );
      Token (Literal ")");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
    ];
  );
  "formal_parameters",
  Some (
    Seq [
      Token (Literal "(");
      Opt (
        Seq [
          Alt [|
            Token (Name "pattern");
            Token (Name "assignment_pattern");
          |];
          Repeat (
            Seq [
              Token (Literal ",");
              Alt [|
                Token (Name "pattern");
                Token (Name "assignment_pattern");
              |];
            ];
          );
          Opt (
            Token (Literal ",");
          );
        ];
      );
      Token (Literal ")");
    ];
  );
  "function",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Opt (
        Token (Name "identifier");
      );
      Token (Name "formal_parameters");
      Token (Name "statement_block");
    ];
  );
  "function_declaration",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Token (Name "identifier");
      Token (Name "formal_parameters");
      Token (Name "statement_block");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "generator_function",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Token (Literal "*");
      Opt (
        Token (Name "identifier");
      );
      Token (Name "formal_parameters");
      Token (Name "statement_block");
    ];
  );
  "generator_function_declaration",
  Some (
    Seq [
      Opt (
        Token (Literal "async");
      );
      Token (Literal "function");
      Token (Literal "*");
      Token (Name "identifier");
      Token (Name "formal_parameters");
      Token (Name "statement_block");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "if_statement",
  Some (
    Seq [
      Token (Literal "if");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
      Opt (
        Token (Name "else_clause");
      );
    ];
  );
  "initializer",
  Some (
    Seq [
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "jsx_attribute",
  Some (
    Seq [
      Alt [|
        Alt [|
          Token (Name "jsx_identifier");
          Token (Name "identifier");
        |];
        Token (Name "jsx_namespace_name");
      |];
      Opt (
        Seq [
          Token (Literal "=");
          Alt [|
            Token (Name "string");
            Token (Name "jsx_expression");
            Alt [|
              Token (Name "jsx_element");
              Token (Name "jsx_self_closing_element");
            |];
            Token (Name "jsx_fragment");
          |];
        ];
      );
    ];
  );
  "jsx_element",
  Some (
    Seq [
      Token (Name "jsx_opening_element");
      Repeat (
        Alt [|
          Token (Name "jsx_text");
          Alt [|
            Token (Name "jsx_element");
            Token (Name "jsx_self_closing_element");
          |];
          Token (Name "jsx_fragment");
          Token (Name "jsx_expression");
        |];
      );
      Token (Name "jsx_closing_element");
    ];
  );
  "jsx_expression",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "sequence_expression");
          Token (Name "spread_element");
        |];
      );
      Token (Literal "}");
    ];
  );
  "jsx_fragment",
  Some (
    Seq [
      Token (Literal "<");
      Token (Literal ">");
      Repeat (
        Alt [|
          Token (Name "jsx_text");
          Alt [|
            Token (Name "jsx_element");
            Token (Name "jsx_self_closing_element");
          |];
          Token (Name "jsx_fragment");
          Token (Name "jsx_expression");
        |];
      );
      Token (Literal "<");
      Token (Literal "/");
      Token (Literal ">");
    ];
  );
  "jsx_opening_element",
  Some (
    Seq [
      Token (Literal "<");
      Alt [|
        Alt [|
          Token (Name "jsx_identifier");
          Token (Name "identifier");
        |];
        Token (Name "nested_identifier");
        Token (Name "jsx_namespace_name");
      |];
      Repeat (
        Alt [|
          Token (Name "jsx_attribute");
          Token (Name "jsx_expression");
        |];
      );
      Token (Literal ">");
    ];
  );
  "jsx_self_closing_element",
  Some (
    Seq [
      Token (Literal "<");
      Alt [|
        Alt [|
          Token (Name "jsx_identifier");
          Token (Name "identifier");
        |];
        Token (Name "nested_identifier");
        Token (Name "jsx_namespace_name");
      |];
      Repeat (
        Alt [|
          Token (Name "jsx_attribute");
          Token (Name "jsx_expression");
        |];
      );
      Token (Literal "/");
      Token (Literal ">");
    ];
  );
  "labeled_statement",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "async");
          Token (Literal "static");
          Token (Literal "export");
        |];
      |];
      Token (Literal ":");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
    ];
  );
  "lexical_declaration",
  Some (
    Seq [
      Alt [|
        Token (Literal "let");
        Token (Literal "const");
      |];
      Token (Name "variable_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variable_declarator");
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "member_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "primary_expression");
      |];
      Alt [|
        Token (Literal ".");
        Token (Literal "?.");
      |];
      Alt [|
        Token (Name "private_property_identifier");
        Token (Name "identifier");
      |];
    ];
  );
  "method_definition",
  Some (
    Seq [
      Repeat (
        Token (Name "decorator");
      );
      Opt (
        Token (Literal "static");
      );
      Opt (
        Token (Literal "async");
      );
      Opt (
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "*");
        |];
      );
      Token (Name "property_name");
      Token (Name "formal_parameters");
      Token (Name "statement_block");
    ];
  );
  "new_expression",
  Some (
    Seq [
      Token (Literal "new");
      Alt [|
        Token (Name "primary_expression");
        Token (Name "new_expression");
      |];
      Opt (
        Token (Name "arguments");
      );
    ];
  );
  "object",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "pair");
              Token (Name "spread_element");
              Token (Name "method_definition");
              Alt [|
                Token (Name "identifier");
                Alt [|
                  Token (Literal "get");
                  Token (Literal "set");
                  Token (Literal "async");
                  Token (Literal "static");
                  Token (Literal "export");
                |];
              |];
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "pair");
                  Token (Name "spread_element");
                  Token (Name "method_definition");
                  Alt [|
                    Token (Name "identifier");
                    Alt [|
                      Token (Literal "get");
                      Token (Literal "set");
                      Token (Literal "async");
                      Token (Literal "static");
                      Token (Literal "export");
                    |];
                  |];
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "object_assignment_pattern",
  Some (
    Seq [
      Alt [|
        Alt [|
          Alt [|
            Token (Literal "get");
            Token (Literal "set");
            Token (Literal "async");
            Token (Literal "static");
            Token (Literal "export");
          |];
          Token (Name "identifier");
        |];
        Token (Name "destructuring_pattern");
      |];
      Token (Literal "=");
      Token (Name "expression");
    ];
  );
  "object_pattern",
  Some (
    Seq [
      Token (Literal "{");
      Opt (
        Seq [
          Opt (
            Alt [|
              Token (Name "pair_pattern");
              Token (Name "rest_pattern");
              Token (Name "object_assignment_pattern");
              Alt [|
                Token (Name "identifier");
                Alt [|
                  Token (Literal "get");
                  Token (Literal "set");
                  Token (Literal "async");
                  Token (Literal "static");
                  Token (Literal "export");
                |];
              |];
            |];
          );
          Repeat (
            Seq [
              Token (Literal ",");
              Opt (
                Alt [|
                  Token (Name "pair_pattern");
                  Token (Name "rest_pattern");
                  Token (Name "object_assignment_pattern");
                  Alt [|
                    Token (Name "identifier");
                    Alt [|
                      Token (Literal "get");
                      Token (Literal "set");
                      Token (Literal "async");
                      Token (Literal "static");
                      Token (Literal "export");
                    |];
                  |];
                |];
              );
            ];
          );
        ];
      );
      Token (Literal "}");
    ];
  );
  "pair",
  Some (
    Seq [
      Token (Name "property_name");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "pair_pattern",
  Some (
    Seq [
      Token (Name "property_name");
      Token (Literal ":");
      Alt [|
        Token (Name "pattern");
        Token (Name "assignment_pattern");
      |];
    ];
  );
  "parenthesized_expression",
  Some (
    Seq [
      Token (Literal "(");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal ")");
    ];
  );
  "pattern",
  Some (
    Alt [|
      Alt [|
        Token (Name "member_expression");
        Token (Name "subscript_expression");
        Alt [|
          Token (Name "undefined");
          Token (Name "identifier");
        |];
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "async");
          Token (Literal "static");
          Token (Literal "export");
        |];
        Token (Name "destructuring_pattern");
      |];
      Token (Name "rest_pattern");
    |];
  );
  "primary_expression",
  Some (
    Alt [|
      Token (Name "subscript_expression");
      Token (Name "member_expression");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "undefined");
        Token (Name "identifier");
      |];
      Alt [|
        Token (Literal "get");
        Token (Literal "set");
        Token (Literal "async");
        Token (Literal "static");
        Token (Literal "export");
      |];
      Token (Name "this");
      Token (Name "super");
      Token (Name "number");
      Token (Name "string");
      Token (Name "template_string");
      Token (Name "regex");
      Token (Name "true");
      Token (Name "false");
      Token (Name "null");
      Token (Name "import");
      Token (Name "object");
      Token (Name "array");
      Token (Name "function");
      Token (Name "arrow_function");
      Token (Name "generator_function");
      Token (Name "class");
      Token (Name "meta_property");
      Token (Name "call_expression");
    |];
  );
  "property_name",
  Some (
    Alt [|
      Alt [|
        Token (Name "identifier");
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "async");
          Token (Literal "static");
          Token (Literal "export");
        |];
      |];
      Token (Name "private_property_identifier");
      Token (Name "string");
      Token (Name "number");
      Token (Name "computed_property_name");
    |];
  );
  "rest_pattern",
  Some (
    Seq [
      Token (Literal "...");
      Alt [|
        Token (Name "member_expression");
        Token (Name "subscript_expression");
        Alt [|
          Token (Name "undefined");
          Token (Name "identifier");
        |];
        Alt [|
          Token (Literal "get");
          Token (Literal "set");
          Token (Literal "async");
          Token (Literal "static");
          Token (Literal "export");
        |];
        Token (Name "destructuring_pattern");
      |];
    ];
  );
  "return_statement",
  Some (
    Seq [
      Token (Literal "return");
      Opt (
        Alt [|
          Token (Name "expression");
          Token (Name "sequence_expression");
        |];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "sequence_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Literal ",");
      Alt [|
        Token (Name "sequence_expression");
        Token (Name "expression");
      |];
    ];
  );
  "spread_element",
  Some (
    Seq [
      Token (Literal "...");
      Token (Name "expression");
    ];
  );
  "statement_block",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "export_statement");
          Token (Name "import_statement");
          Token (Name "debugger_statement");
          Token (Name "expression_statement");
          Token (Name "declaration");
          Token (Name "statement_block");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "try_statement");
          Token (Name "with_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "return_statement");
          Token (Name "throw_statement");
          Token (Name "empty_statement");
          Token (Name "labeled_statement");
        |];
      );
      Token (Literal "}");
      Opt (
        Token (Name "automatic_semicolon");
      );
    ];
  );
  "subscript_expression",
  Some (
    Seq [
      Alt [|
        Token (Name "expression");
        Token (Name "primary_expression");
      |];
      Opt (
        Token (Literal "?.");
      );
      Token (Literal "[");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal "]");
    ];
  );
  "switch_body",
  Some (
    Seq [
      Token (Literal "{");
      Repeat (
        Alt [|
          Token (Name "switch_case");
          Token (Name "switch_default");
        |];
      );
      Token (Literal "}");
    ];
  );
  "switch_case",
  Some (
    Seq [
      Token (Literal "case");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal ":");
      Repeat (
        Alt [|
          Token (Name "export_statement");
          Token (Name "import_statement");
          Token (Name "debugger_statement");
          Token (Name "expression_statement");
          Token (Name "declaration");
          Token (Name "statement_block");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "try_statement");
          Token (Name "with_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "return_statement");
          Token (Name "throw_statement");
          Token (Name "empty_statement");
          Token (Name "labeled_statement");
        |];
      );
    ];
  );
  "switch_default",
  Some (
    Seq [
      Token (Literal "default");
      Token (Literal ":");
      Repeat (
        Alt [|
          Token (Name "export_statement");
          Token (Name "import_statement");
          Token (Name "debugger_statement");
          Token (Name "expression_statement");
          Token (Name "declaration");
          Token (Name "statement_block");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "try_statement");
          Token (Name "with_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "return_statement");
          Token (Name "throw_statement");
          Token (Name "empty_statement");
          Token (Name "labeled_statement");
        |];
      );
    ];
  );
  "switch_statement",
  Some (
    Seq [
      Token (Literal "switch");
      Token (Name "parenthesized_expression");
      Token (Name "switch_body");
    ];
  );
  "template_string",
  Some (
    Seq [
      Token (Literal "`");
      Repeat (
        Alt [|
          Token (Name "template_chars");
          Token (Name "escape_sequence");
          Token (Name "template_substitution");
        |];
      );
      Token (Literal "`");
    ];
  );
  "template_substitution",
  Some (
    Seq [
      Token (Literal "${");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Token (Literal "}");
    ];
  );
  "ternary_expression",
  Some (
    Seq [
      Token (Name "expression");
      Token (Name "ternary_qmark");
      Token (Name "expression");
      Token (Literal ":");
      Token (Name "expression");
    ];
  );
  "throw_statement",
  Some (
    Seq [
      Token (Literal "throw");
      Alt [|
        Token (Name "expression");
        Token (Name "sequence_expression");
      |];
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "try_statement",
  Some (
    Seq [
      Token (Literal "try");
      Token (Name "statement_block");
      Opt (
        Token (Name "catch_clause");
      );
      Opt (
        Token (Name "finally_clause");
      );
    ];
  );
  "unary_expression",
  Some (
    Seq [
      Alt [|
        Token (Literal "!");
        Token (Literal "~");
        Token (Literal "-");
        Token (Literal "+");
        Token (Literal "typeof");
        Token (Literal "void");
        Token (Literal "delete");
      |];
      Token (Name "expression");
    ];
  );
  "update_expression",
  Some (
    Alt [|
      Seq [
        Token (Name "expression");
        Alt [|
          Token (Literal "++");
          Token (Literal "--");
        |];
      ];
      Seq [
        Alt [|
          Token (Literal "++");
          Token (Literal "--");
        |];
        Token (Name "expression");
      ];
    |];
  );
  "variable_declaration",
  Some (
    Seq [
      Token (Literal "var");
      Token (Name "variable_declarator");
      Repeat (
        Seq [
          Token (Literal ",");
          Token (Name "variable_declarator");
        ];
      );
      Alt [|
        Token (Name "automatic_semicolon");
        Token (Literal ";");
      |];
    ];
  );
  "variable_declarator",
  Some (
    Seq [
      Alt [|
        Token (Name "identifier");
        Token (Name "destructuring_pattern");
      |];
      Opt (
        Token (Name "initializer");
      );
    ];
  );
  "while_statement",
  Some (
    Seq [
      Token (Literal "while");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
    ];
  );
  "with_statement",
  Some (
    Seq [
      Token (Literal "with");
      Token (Name "parenthesized_expression");
      Alt [|
        Token (Name "export_statement");
        Token (Name "import_statement");
        Token (Name "debugger_statement");
        Token (Name "expression_statement");
        Token (Name "declaration");
        Token (Name "statement_block");
        Token (Name "if_statement");
        Token (Name "switch_statement");
        Token (Name "for_statement");
        Token (Name "for_in_statement");
        Token (Name "while_statement");
        Token (Name "do_statement");
        Token (Name "try_statement");
        Token (Name "with_statement");
        Token (Name "break_statement");
        Token (Name "continue_statement");
        Token (Name "return_statement");
        Token (Name "throw_statement");
        Token (Name "empty_statement");
        Token (Name "labeled_statement");
      |];
    ];
  );
  "yield_expression",
  Some (
    Seq [
      Token (Literal "yield");
      Alt [|
        Seq [
          Token (Literal "*");
          Token (Name "expression");
        ];
        Opt (
          Token (Name "expression");
        );
      |];
    ];
  );
  "program",
  Some (
    Seq [
      Opt (
        Token (Name "hash_bang_line");
      );
      Repeat (
        Alt [|
          Token (Name "export_statement");
          Token (Name "import_statement");
          Token (Name "debugger_statement");
          Token (Name "expression_statement");
          Token (Name "declaration");
          Token (Name "statement_block");
          Token (Name "if_statement");
          Token (Name "switch_statement");
          Token (Name "for_statement");
          Token (Name "for_in_statement");
          Token (Name "while_statement");
          Token (Name "do_statement");
          Token (Name "try_statement");
          Token (Name "with_statement");
          Token (Name "break_statement");
          Token (Name "continue_statement");
          Token (Name "return_statement");
          Token (Name "throw_statement");
          Token (Name "empty_statement");
          Token (Name "labeled_statement");
        |];
      );
    ];
  );
]

let trans_imm_tok_slash ((kind, body) : mt) : CST.imm_tok_slash =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_super ((kind, body) : mt) : CST.super =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_ternary_qmark ((kind, body) : mt) : CST.ternary_qmark =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_comment ((kind, body) : mt) : CST.comment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_jsx_identifier ((kind, body) : mt) : CST.jsx_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_hash_bang_line ((kind, body) : mt) : CST.hash_bang_line =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unescaped_double_string_fragment ((kind, body) : mt) : CST.unescaped_double_string_fragment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_false_ ((kind, body) : mt) : CST.false_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_empty_statement ((kind, body) : mt) : CST.empty_statement =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_regex_pattern ((kind, body) : mt) : CST.regex_pattern =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_true_ ((kind, body) : mt) : CST.true_ =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_automatic_semicolon ((kind, body) : mt) : CST.automatic_semicolon =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_identifier ((kind, body) : mt) : CST.identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_unescaped_single_string_fragment ((kind, body) : mt) : CST.unescaped_single_string_fragment =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_escape_sequence ((kind, body) : mt) : CST.escape_sequence =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_template_chars ((kind, body) : mt) : CST.template_chars =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_import ((kind, body) : mt) : CST.import =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_number ((kind, body) : mt) : CST.number =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_undefined ((kind, body) : mt) : CST.undefined =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_this ((kind, body) : mt) : CST.this =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_regex_flags ((kind, body) : mt) : CST.regex_flags =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_jsx_text ((kind, body) : mt) : CST.jsx_text =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_private_property_identifier ((kind, body) : mt) : CST.private_property_identifier =
  match body with
  | Leaf v -> v
  | Children _ -> assert false


let trans_null ((kind, body) : mt) : CST.null =
  match body with
  | Leaf v -> v
  | Children _ -> assert false

let trans_meta_property ((kind, body) : mt) : CST.meta_property =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_debugger_statement ((kind, body) : mt) : CST.debugger_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false



let trans_import_export_specifier ((kind, body) : mt) : CST.import_export_specifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            trans_identifier (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_identifier (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_jsx_namespace_name ((kind, body) : mt) : CST.jsx_namespace_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Jsx_id (
                  trans_jsx_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Jsx_id (
                  trans_jsx_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_nested_identifier ((kind, body) : mt) : CST.nested_identifier =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_continue_statement ((kind, body) : mt) : CST.continue_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_namespace_import_export ((kind, body) : mt) : CST.namespace_import_export =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_decorator_member_expression ((kind, body) : mt) : CST.decorator_member_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Deco_member_exp (
                  trans_decorator_member_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_break_statement ((kind, body) : mt) : CST.break_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_string_ ((kind, body) : mt) : CST.string_ =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `DQUOT_rep_choice_unes_double_str_frag_DQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Unes_double_str_frag (
                            trans_unescaped_double_string_fragment (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `SQUOT_rep_choice_unes_single_str_frag_SQUOT (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  Run.repeat
                    (fun v ->
                      (match v with
                      | Alt (0, v) ->
                          `Unes_single_str_frag (
                            trans_unescaped_single_string_fragment (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Esc_seq (
                            trans_escape_sequence (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                  ,
                  Run.trans_token (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_regex ((kind, body) : mt) : CST.regex =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_regex_pattern (Run.matcher_token v1),
            trans_imm_tok_slash (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_regex_flags (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_named_imports ((kind, body) : mt) : CST.named_imports =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_import_export_specifier (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_import_export_specifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_export_clause ((kind, body) : mt) : CST.export_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      trans_import_export_specifier (Run.matcher_token v0),
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                trans_import_export_specifier (Run.matcher_token v1)
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_jsx_closing_element ((kind, body) : mt) : CST.jsx_closing_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Choice_jsx_id (
                  (match v with
                  | Alt (0, v) ->
                      `Jsx_id (
                        trans_jsx_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Jsx_name_name (
                  trans_jsx_namespace_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false


let trans_from_clause ((kind, body) : mt) : CST.from_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_string_ (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_clause ((kind, body) : mt) : CST.import_clause =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Name_import_export (
            trans_namespace_import_export (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Named_imports (
            trans_named_imports (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Id_opt_COMMA_choice_name_import_export (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_identifier (Run.matcher_token v0),
                  Run.opt
                    (fun v ->
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            Run.trans_token (Run.matcher_token v0),
                            (match v1 with
                            | Alt (0, v) ->
                                `Name_import_export (
                                  trans_namespace_import_export (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Named_imports (
                                  trans_named_imports (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                    v1
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let trans_import_statement ((kind, body) : mt) : CST.import_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Import_clause_from_clause (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        trans_import_clause (Run.matcher_token v0),
                        trans_from_clause (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Str (
                  trans_string_ (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

let rec trans_arguments ((kind, body) : mt) : CST.arguments =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Exp (
                                trans_expression (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Spread_elem (
                                trans_spread_element (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Exp (
                                          trans_expression (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Spread_elem (
                                          trans_spread_element (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_ ((kind, body) : mt) : CST.array_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Exp (
                                trans_expression (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Spread_elem (
                                trans_spread_element (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Exp (
                                          trans_expression (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Spread_elem (
                                          trans_spread_element (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_array_pattern ((kind, body) : mt) : CST.array_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Pat (
                                trans_pattern (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Assign_pat (
                                trans_assignment_pattern (Run.matcher_token v)
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Pat (
                                          trans_pattern (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Assign_pat (
                                          trans_assignment_pattern (Run.matcher_token v)
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_arrow_function ((kind, body) : mt) : CST.arrow_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            (match v1 with
            | Alt (0, v) ->
                `Choice_choice_get (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_get (
                        (match v with
                        | Alt (0, v) ->
                            `Get (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Set (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Async (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Static (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Formal_params (
                  trans_formal_parameters (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_expression ((kind, body) : mt) : CST.assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Paren_exp (
                  trans_parenthesized_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_member_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Member_exp (
                        trans_member_expression (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Subs_exp (
                        trans_subscript_expression (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Choice_unde (
                        (match v with
                        | Alt (0, v) ->
                            `Unde (
                              trans_undefined (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (3, v) ->
                      `Choice_get (
                        (match v with
                        | Alt (0, v) ->
                            `Get (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Set (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Async (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Static (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (4, v) ->
                      `Dest_pat (
                        trans_destructuring_pattern (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_assignment_pattern ((kind, body) : mt) : CST.assignment_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_pattern (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_augmented_assignment_expression ((kind, body) : mt) : CST.augmented_assignment_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_augmented_assignment_lhs (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `PLUSEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `DASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `STAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `SLASHEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `PERCEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `HATEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `AMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `BAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `GTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `GTGTGTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `LTLTEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `STARSTAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `AMPAMPEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `BARBAREQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `QMARKQMARKEQ (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_augmented_assignment_lhs ((kind, body) : mt) : CST.augmented_assignment_lhs =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Member_exp (
            trans_member_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Subs_exp (
            trans_subscript_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Choice_get (
            (match v with
            | Alt (0, v) ->
                `Get (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Set (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Async (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Static (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Export (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Id (
            trans_identifier (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_await_expression ((kind, body) : mt) : CST.await_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_binary_expression ((kind, body) : mt) : CST.binary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_AMPAMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Exp_BARBAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Exp_GTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (3, v) ->
          `Exp_GTGTGT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Exp_LTLT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `Exp_AMP_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (6, v) ->
          `Exp_HAT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (7, v) ->
          `Exp_BAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (8, v) ->
          `Exp_PLUS_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (9, v) ->
          `Exp_DASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (10, v) ->
          `Exp_STAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (11, v) ->
          `Exp_SLASH_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (12, v) ->
          `Exp_PERC_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (13, v) ->
          `Exp_STARSTAR_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (14, v) ->
          `Exp_LT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (15, v) ->
          `Exp_LTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (16, v) ->
          `Exp_EQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (17, v) ->
          `Exp_EQEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (18, v) ->
          `Exp_BANGEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (19, v) ->
          `Exp_BANGEQEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (20, v) ->
          `Exp_GTEQ_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (21, v) ->
          `Exp_GT_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (22, v) ->
          `Exp_QMARKQMARK_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (23, v) ->
          `Exp_inst_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | Alt (24, v) ->
          `Exp_in_exp (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_expression (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_call_expression ((kind, body) : mt) : CST.call_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_choice_args (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `Args (
                        trans_arguments (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Temp_str (
                        trans_template_string (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Prim_exp_QMARKDOT_args (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  trans_primary_expression (Run.matcher_token v0),
                  Run.trans_token (Run.matcher_token v1),
                  trans_arguments (Run.matcher_token v2)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_catch_clause ((kind, body) : mt) : CST.catch_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Id (
                            trans_identifier (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Dest_pat (
                            trans_destructuring_pattern (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.trans_token (Run.matcher_token v2)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_statement_block (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_ ((kind, body) : mt) : CST.class_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_class_heritage (Run.matcher_token v))
              v3
            ,
            trans_class_body (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_body ((kind, body) : mt) : CST.class_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Meth_defi_opt_SEMI (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_method_definition (Run.matcher_token v0),
                            Run.opt
                              (fun v -> Run.trans_token (Run.matcher_token v))
                              v1
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (1, v) ->
                    `Field_defi_choice_auto_semi (
                      (match v with
                      | Seq [v0; v1] ->
                          (
                            trans_field_definition (Run.matcher_token v0),
                            (match v1 with
                            | Alt (0, v) ->
                                `Auto_semi (
                                  trans_automatic_semicolon (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `SEMI (
                                  Run.trans_token (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_declaration ((kind, body) : mt) : CST.class_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_class_heritage (Run.matcher_token v))
              v3
            ,
            trans_class_body (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_class_heritage ((kind, body) : mt) : CST.class_heritage =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_computed_property_name ((kind, body) : mt) : CST.computed_property_name =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_declaration ((kind, body) : mt) : CST.declaration =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Func_decl (
            trans_function_declaration (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Gene_func_decl (
            trans_generator_function_declaration (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Class_decl (
            trans_class_declaration (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Lexi_decl (
            trans_lexical_declaration (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Var_decl (
            trans_variable_declaration (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_decorator ((kind, body) : mt) : CST.decorator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Deco_member_exp (
                  trans_decorator_member_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Deco_call_exp (
                  trans_decorator_call_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_decorator_call_expression ((kind, body) : mt) : CST.decorator_call_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Deco_member_exp (
                  trans_decorator_member_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_arguments (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_destructuring_pattern ((kind, body) : mt) : CST.destructuring_pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Obj_pat (
            trans_object_pattern (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Array_pat (
            trans_array_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_do_statement ((kind, body) : mt) : CST.do_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            trans_parenthesized_expression (Run.matcher_token v3),
            (match v4 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_else_clause ((kind, body) : mt) : CST.else_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_export_statement ((kind, body) : mt) : CST.export_statement =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Export_choice_STAR_from_clause_choice_auto_semi (
            (match v with
            | Seq [v0; v1] ->
                (
                  Run.trans_token (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `STAR_from_clause_choice_auto_semi (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              Run.trans_token (Run.matcher_token v0),
                              trans_from_clause (Run.matcher_token v1),
                              (match v2 with
                              | Alt (0, v) ->
                                  `Auto_semi (
                                    trans_automatic_semicolon (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `SEMI (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Name_import_export_from_clause_choice_auto_semi (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              trans_namespace_import_export (Run.matcher_token v0),
                              trans_from_clause (Run.matcher_token v1),
                              (match v2 with
                              | Alt (0, v) ->
                                  `Auto_semi (
                                    trans_automatic_semicolon (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `SEMI (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (2, v) ->
                      `Export_clause_from_clause_choice_auto_semi (
                        (match v with
                        | Seq [v0; v1; v2] ->
                            (
                              trans_export_clause (Run.matcher_token v0),
                              trans_from_clause (Run.matcher_token v1),
                              (match v2 with
                              | Alt (0, v) ->
                                  `Auto_semi (
                                    trans_automatic_semicolon (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `SEMI (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (3, v) ->
                      `Export_clause_choice_auto_semi (
                        (match v with
                        | Seq [v0; v1] ->
                            (
                              trans_export_clause (Run.matcher_token v0),
                              (match v1 with
                              | Alt (0, v) ->
                                  `Auto_semi (
                                    trans_automatic_semicolon (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `SEMI (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Rep_deco_export_choice_decl (
            (match v with
            | Seq [v0; v1; v2] ->
                (
                  Run.repeat
                    (fun v -> trans_decorator (Run.matcher_token v))
                    v0
                  ,
                  Run.trans_token (Run.matcher_token v1),
                  (match v2 with
                  | Alt (0, v) ->
                      `Decl (
                        trans_declaration (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Defa_choice_decl (
                        (match v with
                        | Seq [v0; v1] ->
                            (
                              Run.trans_token (Run.matcher_token v0),
                              (match v1 with
                              | Alt (0, v) ->
                                  `Decl (
                                    trans_declaration (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Exp_choice_auto_semi (
                                    (match v with
                                    | Seq [v0; v1] ->
                                        (
                                          trans_expression (Run.matcher_token v0),
                                          (match v1 with
                                          | Alt (0, v) ->
                                              `Auto_semi (
                                                trans_automatic_semicolon (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `SEMI (
                                                Run.trans_token (Run.matcher_token v)
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                              | _ -> assert false
                              )
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression ((kind, body) : mt) : CST.expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Prim_exp (
            trans_primary_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Choice_jsx_elem (
            (match v with
            | Alt (0, v) ->
                `Jsx_elem (
                  trans_jsx_element (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Jsx_self_clos_elem (
                  trans_jsx_self_closing_element (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (2, v) ->
          `Jsx_frag (
            trans_jsx_fragment (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Assign_exp (
            trans_assignment_expression (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Augm_assign_exp (
            trans_augmented_assignment_expression (Run.matcher_token v)
          )
      | Alt (5, v) ->
          `Await_exp (
            trans_await_expression (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Un_exp (
            trans_unary_expression (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Bin_exp (
            trans_binary_expression (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Tern_exp (
            trans_ternary_expression (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Update_exp (
            trans_update_expression (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `New_exp (
            trans_new_expression (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `Yield_exp (
            trans_yield_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_expression_statement ((kind, body) : mt) : CST.expression_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_field_definition ((kind, body) : mt) : CST.field_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_property_name (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_initializer_ (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_finally_clause ((kind, body) : mt) : CST.finally_clause =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement_block (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_header ((kind, body) : mt) : CST.for_header =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Choice_choice_member_exp (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_member_exp (
                        (match v with
                        | Alt (0, v) ->
                            `Member_exp (
                              trans_member_expression (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Subs_exp (
                              trans_subscript_expression (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Choice_unde (
                              (match v with
                              | Alt (0, v) ->
                                  `Unde (
                                    trans_undefined (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Id (
                                    trans_identifier (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (3, v) ->
                            `Choice_get (
                              (match v with
                              | Alt (0, v) ->
                                  `Get (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (1, v) ->
                                  `Set (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (2, v) ->
                                  `Async (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (3, v) ->
                                  `Static (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | Alt (4, v) ->
                                  `Export (
                                    Run.trans_token (Run.matcher_token v)
                                  )
                              | _ -> assert false
                              )
                            )
                        | Alt (4, v) ->
                            `Dest_pat (
                              trans_destructuring_pattern (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Paren_exp (
                        trans_parenthesized_expression (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Var_choice_id_opt_init (
                  (match v with
                  | Seq [v0; v1; v2] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        (match v1 with
                        | Alt (0, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Dest_pat (
                              trans_destructuring_pattern (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        Run.opt
                          (fun v -> trans_initializer_ (Run.matcher_token v))
                          v2
                      )
                  | _ -> assert false
                  )
                )
            | Alt (2, v) ->
                `Choice_let_choice_id (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        (match v0 with
                        | Alt (0, v) ->
                            `Let (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Const (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                        ,
                        (match v1 with
                        | Alt (0, v) ->
                            `Id (
                              trans_identifier (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Dest_pat (
                              trans_destructuring_pattern (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `In (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Of (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v3 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_in_statement ((kind, body) : mt) : CST.for_in_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            trans_for_header (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_for_statement ((kind, body) : mt) : CST.for_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Lexi_decl (
                  trans_lexical_declaration (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Var_decl (
                  trans_variable_declaration (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v3 with
            | Alt (0, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Seq_exp (
                      trans_sequence_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v4
            ,
            Run.trans_token (Run.matcher_token v5),
            (match v6 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_formal_parameters ((kind, body) : mt) : CST.formal_parameters =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1; v2] ->
                    (
                      (match v0 with
                      | Alt (0, v) ->
                          `Pat (
                            trans_pattern (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Assign_pat (
                            trans_assignment_pattern (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                (match v1 with
                                | Alt (0, v) ->
                                    `Pat (
                                      trans_pattern (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Assign_pat (
                                      trans_assignment_pattern (Run.matcher_token v)
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                      ,
                      Run.opt
                        (fun v -> Run.trans_token (Run.matcher_token v))
                        v2
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_ ((kind, body) : mt) : CST.function_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v2
            ,
            trans_formal_parameters (Run.matcher_token v3),
            trans_statement_block (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_function_declaration ((kind, body) : mt) : CST.function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_identifier (Run.matcher_token v2),
            trans_formal_parameters (Run.matcher_token v3),
            trans_statement_block (Run.matcher_token v4),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v5
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generator_function ((kind, body) : mt) : CST.generator_function =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_identifier (Run.matcher_token v))
              v3
            ,
            trans_formal_parameters (Run.matcher_token v4),
            trans_statement_block (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_generator_function_declaration ((kind, body) : mt) : CST.generator_function_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v0
            ,
            Run.trans_token (Run.matcher_token v1),
            Run.trans_token (Run.matcher_token v2),
            trans_identifier (Run.matcher_token v3),
            trans_formal_parameters (Run.matcher_token v4),
            trans_statement_block (Run.matcher_token v5),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v6
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_if_statement ((kind, body) : mt) : CST.if_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_else_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_initializer_ ((kind, body) : mt) : CST.initializer_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_attribute ((kind, body) : mt) : CST.jsx_attribute =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_jsx_id (
                  (match v with
                  | Alt (0, v) ->
                      `Jsx_id (
                        trans_jsx_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Jsx_name_name (
                  trans_jsx_namespace_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      (match v1 with
                      | Alt (0, v) ->
                          `Str (
                            trans_string_ (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Jsx_exp (
                            trans_jsx_expression (Run.matcher_token v)
                          )
                      | Alt (2, v) ->
                          `Choice_jsx_elem (
                            (match v with
                            | Alt (0, v) ->
                                `Jsx_elem (
                                  trans_jsx_element (Run.matcher_token v)
                                )
                            | Alt (1, v) ->
                                `Jsx_self_clos_elem (
                                  trans_jsx_self_closing_element (Run.matcher_token v)
                                )
                            | _ -> assert false
                            )
                          )
                      | Alt (3, v) ->
                          `Jsx_frag (
                            trans_jsx_fragment (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_element ((kind, body) : mt) : CST.jsx_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_jsx_opening_element (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Jsx_text (
                      trans_jsx_text (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Choice_jsx_elem (
                      (match v with
                      | Alt (0, v) ->
                          `Jsx_elem (
                            trans_jsx_element (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Jsx_self_clos_elem (
                            trans_jsx_self_closing_element (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (2, v) ->
                    `Jsx_frag (
                      trans_jsx_fragment (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Jsx_exp (
                      trans_jsx_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            trans_jsx_closing_element (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_expression ((kind, body) : mt) : CST.jsx_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Seq_exp (
                      trans_sequence_expression (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Spread_elem (
                      trans_spread_element (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_fragment ((kind, body) : mt) : CST.jsx_fragment =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Jsx_text (
                      trans_jsx_text (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Choice_jsx_elem (
                      (match v with
                      | Alt (0, v) ->
                          `Jsx_elem (
                            trans_jsx_element (Run.matcher_token v)
                          )
                      | Alt (1, v) ->
                          `Jsx_self_clos_elem (
                            trans_jsx_self_closing_element (Run.matcher_token v)
                          )
                      | _ -> assert false
                      )
                    )
                | Alt (2, v) ->
                    `Jsx_frag (
                      trans_jsx_fragment (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Jsx_exp (
                      trans_jsx_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4),
            Run.trans_token (Run.matcher_token v5)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_opening_element ((kind, body) : mt) : CST.jsx_opening_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Choice_jsx_id (
                  (match v with
                  | Alt (0, v) ->
                      `Jsx_id (
                        trans_jsx_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Jsx_name_name (
                  trans_jsx_namespace_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Jsx_attr (
                      trans_jsx_attribute (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Jsx_exp (
                      trans_jsx_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_jsx_self_closing_element ((kind, body) : mt) : CST.jsx_self_closing_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Choice_jsx_id (
                  (match v with
                  | Alt (0, v) ->
                      `Jsx_id (
                        trans_jsx_identifier (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Nested_id (
                  trans_nested_identifier (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Jsx_name_name (
                  trans_jsx_namespace_name (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Jsx_attr (
                      trans_jsx_attribute (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Jsx_exp (
                      trans_jsx_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            Run.trans_token (Run.matcher_token v3),
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_labeled_statement ((kind, body) : mt) : CST.labeled_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_get (
                  (match v with
                  | Alt (0, v) ->
                      `Get (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Set (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Async (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Static (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Export (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_lexical_declaration ((kind, body) : mt) : CST.lexical_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Let (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Const (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_variable_declarator (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variable_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_member_expression ((kind, body) : mt) : CST.member_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v1 with
            | Alt (0, v) ->
                `DOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `QMARKDOT (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Priv_prop_id (
                  trans_private_property_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_method_definition ((kind, body) : mt) : CST.method_definition =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4; v5; v6] ->
          (
            Run.repeat
              (fun v -> trans_decorator (Run.matcher_token v))
              v0
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Get (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Set (
                      Run.trans_token (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `STAR (
                      Run.trans_token (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
            ,
            trans_property_name (Run.matcher_token v4),
            trans_formal_parameters (Run.matcher_token v5),
            trans_statement_block (Run.matcher_token v6)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_new_expression ((kind, body) : mt) : CST.new_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `New_exp (
                  trans_new_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_arguments (Run.matcher_token v))
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_ ((kind, body) : mt) : CST.object_ =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Pair (
                                trans_pair (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Spread_elem (
                                trans_spread_element (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Meth_defi (
                                trans_method_definition (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Choice_id (
                                (match v with
                                | Alt (0, v) ->
                                    `Id (
                                      trans_identifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_get (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Get (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Set (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (2, v) ->
                                          `Async (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `Static (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `Export (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Pair (
                                          trans_pair (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Spread_elem (
                                          trans_spread_element (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Meth_defi (
                                          trans_method_definition (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Choice_id (
                                          (match v with
                                          | Alt (0, v) ->
                                              `Id (
                                                trans_identifier (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `Choice_get (
                                                (match v with
                                                | Alt (0, v) ->
                                                    `Get (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (1, v) ->
                                                    `Set (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (2, v) ->
                                                    `Async (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (3, v) ->
                                                    `Static (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (4, v) ->
                                                    `Export (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | _ -> assert false
                                                )
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_assignment_pattern ((kind, body) : mt) : CST.object_assignment_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Choice_choice_get (
                  (match v with
                  | Alt (0, v) ->
                      `Choice_get (
                        (match v with
                        | Alt (0, v) ->
                            `Get (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (1, v) ->
                            `Set (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (2, v) ->
                            `Async (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (3, v) ->
                            `Static (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | Alt (4, v) ->
                            `Export (
                              Run.trans_token (Run.matcher_token v)
                            )
                        | _ -> assert false
                        )
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Dest_pat (
                  trans_destructuring_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_object_pattern ((kind, body) : mt) : CST.object_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.opt
                        (fun v ->
                          (match v with
                          | Alt (0, v) ->
                              `Pair_pat (
                                trans_pair_pattern (Run.matcher_token v)
                              )
                          | Alt (1, v) ->
                              `Rest_pat (
                                trans_rest_pattern (Run.matcher_token v)
                              )
                          | Alt (2, v) ->
                              `Obj_assign_pat (
                                trans_object_assignment_pattern (Run.matcher_token v)
                              )
                          | Alt (3, v) ->
                              `Choice_id (
                                (match v with
                                | Alt (0, v) ->
                                    `Id (
                                      trans_identifier (Run.matcher_token v)
                                    )
                                | Alt (1, v) ->
                                    `Choice_get (
                                      (match v with
                                      | Alt (0, v) ->
                                          `Get (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (1, v) ->
                                          `Set (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (2, v) ->
                                          `Async (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (3, v) ->
                                          `Static (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | Alt (4, v) ->
                                          `Export (
                                            Run.trans_token (Run.matcher_token v)
                                          )
                                      | _ -> assert false
                                      )
                                    )
                                | _ -> assert false
                                )
                              )
                          | _ -> assert false
                          )
                        )
                        v0
                      ,
                      Run.repeat
                        (fun v ->
                          (match v with
                          | Seq [v0; v1] ->
                              (
                                Run.trans_token (Run.matcher_token v0),
                                Run.opt
                                  (fun v ->
                                    (match v with
                                    | Alt (0, v) ->
                                        `Pair_pat (
                                          trans_pair_pattern (Run.matcher_token v)
                                        )
                                    | Alt (1, v) ->
                                        `Rest_pat (
                                          trans_rest_pattern (Run.matcher_token v)
                                        )
                                    | Alt (2, v) ->
                                        `Obj_assign_pat (
                                          trans_object_assignment_pattern (Run.matcher_token v)
                                        )
                                    | Alt (3, v) ->
                                        `Choice_id (
                                          (match v with
                                          | Alt (0, v) ->
                                              `Id (
                                                trans_identifier (Run.matcher_token v)
                                              )
                                          | Alt (1, v) ->
                                              `Choice_get (
                                                (match v with
                                                | Alt (0, v) ->
                                                    `Get (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (1, v) ->
                                                    `Set (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (2, v) ->
                                                    `Async (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (3, v) ->
                                                    `Static (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | Alt (4, v) ->
                                                    `Export (
                                                      Run.trans_token (Run.matcher_token v)
                                                    )
                                                | _ -> assert false
                                                )
                                              )
                                          | _ -> assert false
                                          )
                                        )
                                    | _ -> assert false
                                    )
                                  )
                                  v1
                              )
                          | _ -> assert false
                          )
                        )
                        v1
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pair ((kind, body) : mt) : CST.pair =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_property_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pair_pattern ((kind, body) : mt) : CST.pair_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_property_name (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Pat (
                  trans_pattern (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Assign_pat (
                  trans_assignment_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_parenthesized_expression ((kind, body) : mt) : CST.parenthesized_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_pattern ((kind, body) : mt) : CST.pattern =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_member_exp (
            (match v with
            | Alt (0, v) ->
                `Member_exp (
                  trans_member_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Choice_unde (
                  (match v with
                  | Alt (0, v) ->
                      `Unde (
                        trans_undefined (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (3, v) ->
                `Choice_get (
                  (match v with
                  | Alt (0, v) ->
                      `Get (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Set (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Async (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Static (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Export (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (4, v) ->
                `Dest_pat (
                  trans_destructuring_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Rest_pat (
            trans_rest_pattern (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_primary_expression ((kind, body) : mt) : CST.primary_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Subs_exp (
            trans_subscript_expression (Run.matcher_token v)
          )
      | Alt (1, v) ->
          `Member_exp (
            trans_member_expression (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Paren_exp (
            trans_parenthesized_expression (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Choice_unde (
            (match v with
            | Alt (0, v) ->
                `Unde (
                  trans_undefined (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (4, v) ->
          `Choice_get (
            (match v with
            | Alt (0, v) ->
                `Get (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Set (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Async (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Static (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Export (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | Alt (5, v) ->
          `This (
            trans_this (Run.matcher_token v)
          )
      | Alt (6, v) ->
          `Super (
            trans_super (Run.matcher_token v)
          )
      | Alt (7, v) ->
          `Num (
            trans_number (Run.matcher_token v)
          )
      | Alt (8, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (9, v) ->
          `Temp_str (
            trans_template_string (Run.matcher_token v)
          )
      | Alt (10, v) ->
          `Regex (
            trans_regex (Run.matcher_token v)
          )
      | Alt (11, v) ->
          `True (
            trans_true_ (Run.matcher_token v)
          )
      | Alt (12, v) ->
          `False (
            trans_false_ (Run.matcher_token v)
          )
      | Alt (13, v) ->
          `Null (
            trans_null (Run.matcher_token v)
          )
      | Alt (14, v) ->
          `Import (
            trans_import (Run.matcher_token v)
          )
      | Alt (15, v) ->
          `Obj (
            trans_object_ (Run.matcher_token v)
          )
      | Alt (16, v) ->
          `Array (
            trans_array_ (Run.matcher_token v)
          )
      | Alt (17, v) ->
          `Func (
            trans_function_ (Run.matcher_token v)
          )
      | Alt (18, v) ->
          `Arrow_func (
            trans_arrow_function (Run.matcher_token v)
          )
      | Alt (19, v) ->
          `Gene_func (
            trans_generator_function (Run.matcher_token v)
          )
      | Alt (20, v) ->
          `Class (
            trans_class_ (Run.matcher_token v)
          )
      | Alt (21, v) ->
          `Meta_prop (
            trans_meta_property (Run.matcher_token v)
          )
      | Alt (22, v) ->
          `Call_exp (
            trans_call_expression (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_property_name ((kind, body) : mt) : CST.property_name =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Choice_id (
            (match v with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Choice_get (
                  (match v with
                  | Alt (0, v) ->
                      `Get (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Set (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Async (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Static (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Export (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Priv_prop_id (
            trans_private_property_identifier (Run.matcher_token v)
          )
      | Alt (2, v) ->
          `Str (
            trans_string_ (Run.matcher_token v)
          )
      | Alt (3, v) ->
          `Num (
            trans_number (Run.matcher_token v)
          )
      | Alt (4, v) ->
          `Comp_prop_name (
            trans_computed_property_name (Run.matcher_token v)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_rest_pattern ((kind, body) : mt) : CST.rest_pattern =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Member_exp (
                  trans_member_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Subs_exp (
                  trans_subscript_expression (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Choice_unde (
                  (match v with
                  | Alt (0, v) ->
                      `Unde (
                        trans_undefined (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Id (
                        trans_identifier (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (3, v) ->
                `Choice_get (
                  (match v with
                  | Alt (0, v) ->
                      `Get (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `Set (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (2, v) ->
                      `Async (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (3, v) ->
                      `Static (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (4, v) ->
                      `Export (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (4, v) ->
                `Dest_pat (
                  trans_destructuring_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_return_statement ((kind, body) : mt) : CST.return_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.opt
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Exp (
                      trans_expression (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Seq_exp (
                      trans_sequence_expression (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_sequence_expression ((kind, body) : mt) : CST.sequence_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            trans_expression (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_spread_element ((kind, body) : mt) : CST.spread_element =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_statement_block ((kind, body) : mt) : CST.statement_block =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Export_stmt (
                      trans_export_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Import_stmt (
                      trans_import_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Debu_stmt (
                      trans_debugger_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Stmt_blk (
                      trans_statement_block (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `With_stmt (
                      trans_with_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Labe_stmt (
                      trans_labeled_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.opt
              (fun v -> trans_automatic_semicolon (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_subscript_expression ((kind, body) : mt) : CST.subscript_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Prim_exp (
                  trans_primary_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> Run.trans_token (Run.matcher_token v))
              v1
            ,
            Run.trans_token (Run.matcher_token v2),
            (match v3 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_body ((kind, body) : mt) : CST.switch_body =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Switch_case (
                      trans_switch_case (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Switch_defa (
                      trans_switch_default (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_case ((kind, body) : mt) : CST.switch_case =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Export_stmt (
                      trans_export_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Import_stmt (
                      trans_import_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Debu_stmt (
                      trans_debugger_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Stmt_blk (
                      trans_statement_block (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `With_stmt (
                      trans_with_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Labe_stmt (
                      trans_labeled_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_default ((kind, body) : mt) : CST.switch_default =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.trans_token (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Export_stmt (
                      trans_export_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Import_stmt (
                      trans_import_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Debu_stmt (
                      trans_debugger_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Stmt_blk (
                      trans_statement_block (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `With_stmt (
                      trans_with_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Labe_stmt (
                      trans_labeled_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v2
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_switch_statement ((kind, body) : mt) : CST.switch_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            trans_switch_body (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_string ((kind, body) : mt) : CST.template_string =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Temp_chars (
                      trans_template_chars (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Esc_seq (
                      trans_escape_sequence (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Temp_subs (
                      trans_template_substitution (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_template_substitution ((kind, body) : mt) : CST.template_substitution =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.trans_token (Run.matcher_token v2)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_ternary_expression ((kind, body) : mt) : CST.ternary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3; v4] ->
          (
            trans_expression (Run.matcher_token v0),
            trans_ternary_qmark (Run.matcher_token v1),
            trans_expression (Run.matcher_token v2),
            Run.trans_token (Run.matcher_token v3),
            trans_expression (Run.matcher_token v4)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_throw_statement ((kind, body) : mt) : CST.throw_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `Exp (
                  trans_expression (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Seq_exp (
                  trans_sequence_expression (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            (match v2 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_try_statement ((kind, body) : mt) : CST.try_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_statement_block (Run.matcher_token v1),
            Run.opt
              (fun v -> trans_catch_clause (Run.matcher_token v))
              v2
            ,
            Run.opt
              (fun v -> trans_finally_clause (Run.matcher_token v))
              v3
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_unary_expression ((kind, body) : mt) : CST.unary_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `BANG (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `TILDE (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `DASH (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `PLUS (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Typeof (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Void (
                  Run.trans_token (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `Delete (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            trans_expression (Run.matcher_token v1)
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_update_expression ((kind, body) : mt) : CST.update_expression =
  match body with
  | Children v ->
      (match v with
      | Alt (0, v) ->
          `Exp_choice_PLUSPLUS (
            (match v with
            | Seq [v0; v1] ->
                (
                  trans_expression (Run.matcher_token v0),
                  (match v1 with
                  | Alt (0, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                )
            | _ -> assert false
            )
          )
      | Alt (1, v) ->
          `Choice_PLUSPLUS_exp (
            (match v with
            | Seq [v0; v1] ->
                (
                  (match v0 with
                  | Alt (0, v) ->
                      `PLUSPLUS (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | Alt (1, v) ->
                      `DASHDASH (
                        Run.trans_token (Run.matcher_token v)
                      )
                  | _ -> assert false
                  )
                  ,
                  trans_expression (Run.matcher_token v1)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declaration ((kind, body) : mt) : CST.variable_declaration =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2; v3] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_variable_declarator (Run.matcher_token v1),
            Run.repeat
              (fun v ->
                (match v with
                | Seq [v0; v1] ->
                    (
                      Run.trans_token (Run.matcher_token v0),
                      trans_variable_declarator (Run.matcher_token v1)
                    )
                | _ -> assert false
                )
              )
              v2
            ,
            (match v3 with
            | Alt (0, v) ->
                `Auto_semi (
                  trans_automatic_semicolon (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `SEMI (
                  Run.trans_token (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_variable_declarator ((kind, body) : mt) : CST.variable_declarator =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            (match v0 with
            | Alt (0, v) ->
                `Id (
                  trans_identifier (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Dest_pat (
                  trans_destructuring_pattern (Run.matcher_token v)
                )
            | _ -> assert false
            )
            ,
            Run.opt
              (fun v -> trans_initializer_ (Run.matcher_token v))
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_while_statement ((kind, body) : mt) : CST.while_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_with_statement ((kind, body) : mt) : CST.with_statement =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1; v2] ->
          (
            Run.trans_token (Run.matcher_token v0),
            trans_parenthesized_expression (Run.matcher_token v1),
            (match v2 with
            | Alt (0, v) ->
                `Export_stmt (
                  trans_export_statement (Run.matcher_token v)
                )
            | Alt (1, v) ->
                `Import_stmt (
                  trans_import_statement (Run.matcher_token v)
                )
            | Alt (2, v) ->
                `Debu_stmt (
                  trans_debugger_statement (Run.matcher_token v)
                )
            | Alt (3, v) ->
                `Exp_stmt (
                  trans_expression_statement (Run.matcher_token v)
                )
            | Alt (4, v) ->
                `Decl (
                  trans_declaration (Run.matcher_token v)
                )
            | Alt (5, v) ->
                `Stmt_blk (
                  trans_statement_block (Run.matcher_token v)
                )
            | Alt (6, v) ->
                `If_stmt (
                  trans_if_statement (Run.matcher_token v)
                )
            | Alt (7, v) ->
                `Switch_stmt (
                  trans_switch_statement (Run.matcher_token v)
                )
            | Alt (8, v) ->
                `For_stmt (
                  trans_for_statement (Run.matcher_token v)
                )
            | Alt (9, v) ->
                `For_in_stmt (
                  trans_for_in_statement (Run.matcher_token v)
                )
            | Alt (10, v) ->
                `While_stmt (
                  trans_while_statement (Run.matcher_token v)
                )
            | Alt (11, v) ->
                `Do_stmt (
                  trans_do_statement (Run.matcher_token v)
                )
            | Alt (12, v) ->
                `Try_stmt (
                  trans_try_statement (Run.matcher_token v)
                )
            | Alt (13, v) ->
                `With_stmt (
                  trans_with_statement (Run.matcher_token v)
                )
            | Alt (14, v) ->
                `Brk_stmt (
                  trans_break_statement (Run.matcher_token v)
                )
            | Alt (15, v) ->
                `Cont_stmt (
                  trans_continue_statement (Run.matcher_token v)
                )
            | Alt (16, v) ->
                `Ret_stmt (
                  trans_return_statement (Run.matcher_token v)
                )
            | Alt (17, v) ->
                `Throw_stmt (
                  trans_throw_statement (Run.matcher_token v)
                )
            | Alt (18, v) ->
                `Empty_stmt (
                  trans_empty_statement (Run.matcher_token v)
                )
            | Alt (19, v) ->
                `Labe_stmt (
                  trans_labeled_statement (Run.matcher_token v)
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

and trans_yield_expression ((kind, body) : mt) : CST.yield_expression =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.trans_token (Run.matcher_token v0),
            (match v1 with
            | Alt (0, v) ->
                `STAR_exp (
                  (match v with
                  | Seq [v0; v1] ->
                      (
                        Run.trans_token (Run.matcher_token v0),
                        trans_expression (Run.matcher_token v1)
                      )
                  | _ -> assert false
                  )
                )
            | Alt (1, v) ->
                `Opt_exp (
                  Run.opt
                    (fun v -> trans_expression (Run.matcher_token v))
                    v
                )
            | _ -> assert false
            )
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false










let trans_program ((kind, body) : mt) : CST.program =
  match body with
  | Children v ->
      (match v with
      | Seq [v0; v1] ->
          (
            Run.opt
              (fun v -> trans_hash_bang_line (Run.matcher_token v))
              v0
            ,
            Run.repeat
              (fun v ->
                (match v with
                | Alt (0, v) ->
                    `Export_stmt (
                      trans_export_statement (Run.matcher_token v)
                    )
                | Alt (1, v) ->
                    `Import_stmt (
                      trans_import_statement (Run.matcher_token v)
                    )
                | Alt (2, v) ->
                    `Debu_stmt (
                      trans_debugger_statement (Run.matcher_token v)
                    )
                | Alt (3, v) ->
                    `Exp_stmt (
                      trans_expression_statement (Run.matcher_token v)
                    )
                | Alt (4, v) ->
                    `Decl (
                      trans_declaration (Run.matcher_token v)
                    )
                | Alt (5, v) ->
                    `Stmt_blk (
                      trans_statement_block (Run.matcher_token v)
                    )
                | Alt (6, v) ->
                    `If_stmt (
                      trans_if_statement (Run.matcher_token v)
                    )
                | Alt (7, v) ->
                    `Switch_stmt (
                      trans_switch_statement (Run.matcher_token v)
                    )
                | Alt (8, v) ->
                    `For_stmt (
                      trans_for_statement (Run.matcher_token v)
                    )
                | Alt (9, v) ->
                    `For_in_stmt (
                      trans_for_in_statement (Run.matcher_token v)
                    )
                | Alt (10, v) ->
                    `While_stmt (
                      trans_while_statement (Run.matcher_token v)
                    )
                | Alt (11, v) ->
                    `Do_stmt (
                      trans_do_statement (Run.matcher_token v)
                    )
                | Alt (12, v) ->
                    `Try_stmt (
                      trans_try_statement (Run.matcher_token v)
                    )
                | Alt (13, v) ->
                    `With_stmt (
                      trans_with_statement (Run.matcher_token v)
                    )
                | Alt (14, v) ->
                    `Brk_stmt (
                      trans_break_statement (Run.matcher_token v)
                    )
                | Alt (15, v) ->
                    `Cont_stmt (
                      trans_continue_statement (Run.matcher_token v)
                    )
                | Alt (16, v) ->
                    `Ret_stmt (
                      trans_return_statement (Run.matcher_token v)
                    )
                | Alt (17, v) ->
                    `Throw_stmt (
                      trans_throw_statement (Run.matcher_token v)
                    )
                | Alt (18, v) ->
                    `Empty_stmt (
                      trans_empty_statement (Run.matcher_token v)
                    )
                | Alt (19, v) ->
                    `Labe_stmt (
                      trans_labeled_statement (Run.matcher_token v)
                    )
                | _ -> assert false
                )
              )
              v1
          )
      | _ -> assert false
      )
  | Leaf _ -> assert false

(*
   Costly operation that translates a whole tree or subtree.

   The first pass translates it into a generic tree structure suitable
   to guess which node corresponds to each grammar rule.
   The second pass is a translation into a typed tree where each grammar
   node has its own type.

   This function is called:
   - once on the root of the program after removing extras
     (comments and other nodes that occur anywhere independently from
     the grammar);
   - once of each extra node, resulting in its own independent tree of type
     'extra'.
*)
let translate_tree src node trans_x =
  let matched_tree = Run.match_tree children_regexps src node in
  Option.map trans_x matched_tree


let translate_extra src (node : Tree_sitter_output_t.node) : CST.extra option =
  match node.type_ with
  | "comment" ->
      (match translate_tree src node trans_comment with
      | None -> None
      | Some x -> Some (`Comment (Run.get_loc node, x)))
  | _ -> None

let translate_root src root_node =
  translate_tree src root_node trans_program

let parse_input_tree input_tree =
  let orig_root_node = Tree_sitter_parsing.root input_tree in
  let src = Tree_sitter_parsing.src input_tree in
  let errors = Run.extract_errors src orig_root_node in
  let opt_program, extras =
     Run.translate
       ~extras
       ~translate_root:(translate_root src)
       ~translate_extra:(translate_extra src)
       orig_root_node
  in
  Parsing_result.create src opt_program extras errors

let string ?src_file contents =
  let input_tree = parse_source_string ?src_file contents in
  parse_input_tree input_tree

let file src_file =
  let input_tree = parse_source_file src_file in
  parse_input_tree input_tree

