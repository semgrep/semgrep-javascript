(* Generated by ocaml-tree-sitter. *)
(*
   javascript grammar

   entrypoint: program
*)

open! Sexplib.Conv
open Tree_sitter_run

type identifier = Token.t

type unescaped_double_string_fragment = Token.t (* pattern "[^\"\\\\]+" *)

type anon_choice_let_ca16eb3 = [
    `Let of Token.t (* "let" *)
  | `Const of Token.t (* "const" *)
]

type jsx_text = Token.t (* pattern [^{}<>]+ *)

type import = Token.t

type escape_sequence = Token.t

type hash_bang_line = Token.t (* pattern #!.* *)

type private_property_identifier = Token.t

type ternary_qmark = Token.t

type jsx_identifier =
  Token.t (* pattern [a-zA-Z_$][a-zA-Z\d_$]*-[a-zA-Z\d_$\-]* *)

type unescaped_single_string_fragment = Token.t (* pattern "[^'\\\\]+" *)

type template_chars = Token.t

type number = Token.t

type regex_flags = Token.t (* pattern [a-z]+ *)

type regex_pattern = Token.t

type anon_choice_PLUSPLUS_e498e28 = [
    `PLUSPLUS of Token.t (* "++" *)
  | `DASHDASH of Token.t (* "--" *)
]

type automatic_semicolon = Token.t

type reserved_identifier = [
    `Get of Token.t (* "get" *)
  | `Set of Token.t (* "set" *)
  | `Async of Token.t (* "async" *)
  | `Static of Token.t (* "static" *)
  | `Export of Token.t (* "export" *)
]

type imm_tok_slash = Token.t (* "/" *)

type import_export_specifier = (
    identifier (*tok*)
  * (Token.t (* "as" *) * identifier (*tok*)) option
)

type anon_choice_id_b8f8ced = [
    `Id of identifier (*tok*)
  | `Deco_member_exp of decorator_member_expression
]

and decorator_member_expression = (
    anon_choice_id_b8f8ced * Token.t (* "." *) * identifier (*tok*)
)

type namespace_import_export = (
    Token.t (* "*" *) * Token.t (* "as" *) * identifier (*tok*)
)

type nested_identifier = (
    [ `Id of identifier (*tok*) | `Nested_id of nested_identifier ]
  * Token.t (* "." *)
  * identifier (*tok*)
)

type identifier_ = [
    `Unde of Token.t (* "undefined" *)
  | `Id of identifier (*tok*)
]

type jsx_identifier_ = [
    `Jsx_id of jsx_identifier (*tok*)
  | `Id of identifier (*tok*)
]

type string_ = [
    `DQUOT_rep_choice_unes_double_str_frag_DQUOT of (
        Token.t (* "\"" *)
      * [
            `Unes_double_str_frag of unescaped_double_string_fragment (*tok*)
          | `Esc_seq of escape_sequence (*tok*)
        ]
          list (* zero or more *)
      * Token.t (* "\"" *)
    )
  | `SQUOT_rep_choice_unes_single_str_frag_SQUOT of (
        Token.t (* "'" *)
      * [
            `Unes_single_str_frag of unescaped_single_string_fragment (*tok*)
          | `Esc_seq of escape_sequence (*tok*)
        ]
          list (* zero or more *)
      * Token.t (* "'" *)
    )
]

type semicolon = [
    `Auto_semi of automatic_semicolon (*tok*)
  | `SEMI of Token.t (* ";" *)
]

type anon_choice_rese_id_9a83200 = [
    `Choice_get of reserved_identifier
  | `Id of identifier (*tok*)
]

type anon_choice_id_0e3c97f = [
    `Id of identifier (*tok*)
  | `Choice_get of reserved_identifier
]

type anon_import_export_spec_rep_COMMA_import_export_spec_3a1421d = (
    import_export_specifier
  * (Token.t (* "," *) * import_export_specifier) list (* zero or more *)
)

type jsx_namespace_name = (
    jsx_identifier_ * Token.t (* ":" *) * jsx_identifier_
)

type from_clause = (Token.t (* "from" *) * string_)

type export_clause = (
    Token.t (* "{" *)
  * anon_import_export_spec_rep_COMMA_import_export_spec_3a1421d option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)

type named_imports = (
    Token.t (* "{" *)
  * anon_import_export_spec_rep_COMMA_import_export_spec_3a1421d option
  * Token.t (* "," *) option
  * Token.t (* "}" *)
)

type jsx_attribute_name = [
    `Choice_jsx_id of jsx_identifier_
  | `Jsx_name_name of jsx_namespace_name
]

type jsx_element_name = [
    `Choice_jsx_id of jsx_identifier_
  | `Nested_id of nested_identifier
  | `Jsx_name_name of jsx_namespace_name
]

type import_clause = [
    `Name_import_export of namespace_import_export
  | `Named_imports of named_imports
  | `Id_opt_COMMA_choice_name_import_export of (
        identifier (*tok*)
      * (
            Token.t (* "," *)
          * [
                `Name_import_export of namespace_import_export
              | `Named_imports of named_imports
            ]
        )
          option
    )
]

type jsx_closing_element = (
    Token.t (* "<" *) * Token.t (* "/" *) * jsx_element_name
  * Token.t (* ">" *)
)

type anon_choice_exp_9818c1b = [
    `Exp of expression
  | `Spread_elem of spread_element
]

and anon_choice_exp_9cd0ed5 = [
    `Exp of expression
  | `Prim_exp of primary_expression
]

and anon_choice_id_940079a = [
    `Id of identifier (*tok*)
  | `Dest_pat of destructuring_pattern
]

and anon_choice_pair_20c9acd = [
    `Pair of (property_name * Token.t (* ":" *) * expression)
  | `Spread_elem of spread_element
  | `Meth_defi of method_definition
  | `Choice_id of anon_choice_id_0e3c97f
]

and anon_choice_pair_pat_3ff9cbe = [
    `Pair_pat of (property_name * Token.t (* ":" *) * formal_parameter)
  | `Rest_pat of rest_pattern
  | `Obj_assign_pat of (
        [
            `Choice_choice_get of anon_choice_rese_id_9a83200
          | `Dest_pat of destructuring_pattern
        ]
      * Token.t (* "=" *)
      * expression
    )
  | `Choice_id of anon_choice_id_0e3c97f
]

and anon_opt_opt_choice_exp_rep_COMMA_opt_choice_exp_208ebb4 =
  (anon_choice_exp_9818c1b option * anon_rep_COMMA_opt_choice_exp_ca698a5)
    option

and anon_rep_COMMA_opt_choice_exp_ca698a5 =
  (Token.t (* "," *) * anon_choice_exp_9818c1b option)
    list (* zero or more *)

and arguments = (
    Token.t (* "(" *)
  * anon_opt_opt_choice_exp_rep_COMMA_opt_choice_exp_208ebb4
  * Token.t (* ")" *)
)

and augmented_assignment_lhs = [
    `Member_exp of member_expression
  | `Subs_exp of subscript_expression
  | `Choice_get of reserved_identifier
  | `Id of identifier (*tok*)
  | `Paren_exp of parenthesized_expression
]

and binary_expression = [
    `Exp_AMPAMP_exp of (expression * Token.t (* "&&" *) * expression)
  | `Exp_BARBAR_exp of (expression * Token.t (* "||" *) * expression)
  | `Exp_GTGT_exp of (expression * Token.t (* ">>" *) * expression)
  | `Exp_GTGTGT_exp of (expression * Token.t (* ">>>" *) * expression)
  | `Exp_LTLT_exp of (expression * Token.t (* "<<" *) * expression)
  | `Exp_AMP_exp of (expression * Token.t (* "&" *) * expression)
  | `Exp_HAT_exp of (expression * Token.t (* "^" *) * expression)
  | `Exp_BAR_exp of (expression * Token.t (* "|" *) * expression)
  | `Exp_PLUS_exp of (expression * Token.t (* "+" *) * expression)
  | `Exp_DASH_exp of (expression * Token.t (* "-" *) * expression)
  | `Exp_STAR_exp of (expression * Token.t (* "*" *) * expression)
  | `Exp_SLASH_exp of (expression * Token.t (* "/" *) * expression)
  | `Exp_PERC_exp of (expression * Token.t (* "%" *) * expression)
  | `Exp_STARSTAR_exp of (expression * Token.t (* "**" *) * expression)
  | `Exp_LT_exp of (expression * Token.t (* "<" *) * expression)
  | `Exp_LTEQ_exp of (expression * Token.t (* "<=" *) * expression)
  | `Exp_EQEQ_exp of (expression * Token.t (* "==" *) * expression)
  | `Exp_EQEQEQ_exp of (expression * Token.t (* "===" *) * expression)
  | `Exp_BANGEQ_exp of (expression * Token.t (* "!=" *) * expression)
  | `Exp_BANGEQEQ_exp of (expression * Token.t (* "!==" *) * expression)
  | `Exp_GTEQ_exp of (expression * Token.t (* ">=" *) * expression)
  | `Exp_GT_exp of (expression * Token.t (* ">" *) * expression)
  | `Exp_QMARKQMARK_exp of (expression * Token.t (* "??" *) * expression)
  | `Exp_inst_exp of (expression * Token.t (* "instanceof" *) * expression)
  | `Exp_in_exp of (expression * Token.t (* "in" *) * expression)
]

and call_expression = [
    `Exp_choice_args of (
        expression
      * [ `Args of arguments | `Temp_str of template_string ]
    )
  | `Prim_exp_QMARKDOT_args of (
        primary_expression * Token.t (* "?." *) * arguments
    )
]

and call_signature = formal_parameters

and catch_clause = (
    Token.t (* "catch" *)
  * (Token.t (* "(" *) * anon_choice_id_940079a * Token.t (* ")" *)) option
  * statement_block
)

and class_body = (
    Token.t (* "{" *)
  * [
        `Meth_defi_opt_SEMI of (method_definition * Token.t (* ";" *) option)
      | `Field_defi_choice_auto_semi of (field_definition * semicolon)
    ]
      list (* zero or more *)
  * Token.t (* "}" *)
)

and class_heritage = (Token.t (* "extends" *) * expression)

and declaration = [
    `Func_decl of (
        Token.t (* "async" *) option
      * Token.t (* "function" *)
      * identifier (*tok*)
      * call_signature
      * statement_block
      * automatic_semicolon (*tok*) option
    )
  | `Gene_func_decl of (
        Token.t (* "async" *) option
      * Token.t (* "function" *)
      * Token.t (* "*" *)
      * identifier (*tok*)
      * call_signature
      * statement_block
      * automatic_semicolon (*tok*) option
    )
  | `Class_decl of (
        decorator list (* zero or more *)
      * Token.t (* "class" *)
      * identifier (*tok*)
      * class_heritage option
      * class_body
      * automatic_semicolon (*tok*) option
    )
  | `Lexi_decl of lexical_declaration
  | `Var_decl of variable_declaration
]

and decorator = (
    Token.t (* "@" *)
  * [
        `Id of identifier (*tok*)
      | `Deco_member_exp of decorator_member_expression
      | `Deco_call_exp of decorator_call_expression
    ]
)

and decorator_call_expression = (anon_choice_id_b8f8ced * arguments)

and destructuring_pattern = [
    `Obj_pat of (
        Token.t (* "{" *)
      * (
            anon_choice_pair_pat_3ff9cbe option
          * (Token.t (* "," *) * anon_choice_pair_pat_3ff9cbe option)
              list (* zero or more *)
        )
          option
      * Token.t (* "}" *)
    )
  | `Array_pat of (
        Token.t (* "[" *)
      * (
            formal_parameter option
          * (Token.t (* "," *) * formal_parameter option)
              list (* zero or more *)
        )
          option
      * Token.t (* "]" *)
    )
]

and else_clause = (Token.t (* "else" *) * statement)

and export_statement = [
    `Export_choice_STAR_from_clause_choice_auto_semi of (
        Token.t (* "export" *)
      * [
            `STAR_from_clause_choice_auto_semi of (
                Token.t (* "*" *) * from_clause * semicolon
            )
          | `Name_import_export_from_clause_choice_auto_semi of (
                namespace_import_export * from_clause * semicolon
            )
          | `Export_clause_from_clause_choice_auto_semi of (
                export_clause * from_clause * semicolon
            )
          | `Export_clause_choice_auto_semi of (export_clause * semicolon)
        ]
    )
  | `Rep_deco_export_choice_decl of (
        decorator list (* zero or more *)
      * Token.t (* "export" *)
      * [
            `Decl of declaration
          | `Defa_choice_decl of (
                Token.t (* "default" *)
              * [
                    `Decl of declaration
                  | `Exp_choice_auto_semi of (expression * semicolon)
                ]
            )
        ]
    )
]

and expression = [
    `Prim_exp of primary_expression
  | `Choice_jsx_elem of jsx_element_
  | `Jsx_frag of jsx_fragment
  | `Assign_exp of (
        [
            `Paren_exp of parenthesized_expression
          | `Choice_member_exp of lhs_expression
        ]
      * Token.t (* "=" *)
      * expression
    )
  | `Augm_assign_exp of (
        augmented_assignment_lhs
      * [
            `PLUSEQ of Token.t (* "+=" *)
          | `DASHEQ of Token.t (* "-=" *)
          | `STAREQ of Token.t (* "*=" *)
          | `SLASHEQ of Token.t (* "/=" *)
          | `PERCEQ of Token.t (* "%=" *)
          | `HATEQ of Token.t (* "^=" *)
          | `AMPEQ of Token.t (* "&=" *)
          | `BAREQ of Token.t (* "|=" *)
          | `GTGTEQ of Token.t (* ">>=" *)
          | `GTGTGTEQ of Token.t (* ">>>=" *)
          | `LTLTEQ of Token.t (* "<<=" *)
          | `STARSTAREQ of Token.t (* "**=" *)
          | `AMPAMPEQ of Token.t (* "&&=" *)
          | `BARBAREQ of Token.t (* "||=" *)
          | `QMARKQMARKEQ of Token.t (* "??=" *)
        ]
      * expression
    )
  | `Await_exp of (Token.t (* "await" *) * expression)
  | `Un_exp of (
        [
            `BANG of Token.t (* "!" *)
          | `TILDE of Token.t (* "~" *)
          | `DASH of Token.t (* "-" *)
          | `PLUS of Token.t (* "+" *)
          | `Typeof of Token.t (* "typeof" *)
          | `Void of Token.t (* "void" *)
          | `Delete of Token.t (* "delete" *)
        ]
      * expression
    )
  | `Bin_exp of binary_expression
  | `Tern_exp of (
        expression * ternary_qmark (*tok*) * expression * Token.t (* ":" *)
      * expression
    )
  | `Update_exp of update_expression
  | `New_exp of new_expression
  | `Yield_exp of (
        Token.t (* "yield" *)
      * [
            `STAR_exp of (Token.t (* "*" *) * expression)
          | `Opt_exp of expression option
        ]
    )
]

and expression_statement = (expressions * semicolon)

and expressions = [ `Exp of expression | `Seq_exp of sequence_expression ]

and field_definition = (
    decorator list (* zero or more *)
  * Token.t (* "static" *) option
  * property_name
  * initializer_ option
)

and finally_clause = (Token.t (* "finally" *) * statement_block)

and for_header = (
    Token.t (* "(" *)
  * [
        `Choice_choice_member_exp of [
            `Choice_member_exp of lhs_expression
          | `Paren_exp of parenthesized_expression
        ]
      | `Var_choice_id_opt_init of (
            Token.t (* "var" *)
          * anon_choice_id_940079a
          * initializer_ option
        )
      | `Choice_let_choice_id of (
            anon_choice_let_ca16eb3 * anon_choice_id_940079a
        )
    ]
  * [ `In of Token.t (* "in" *) | `Of of Token.t (* "of" *) ]
  * expressions
  * Token.t (* ")" *)
)

and formal_parameter = [
    `Pat of pattern
  | `Assign_pat of (pattern * Token.t (* "=" *) * expression)
]

and formal_parameters = (
    Token.t (* "(" *)
  * (
        formal_parameter
      * (Token.t (* "," *) * formal_parameter) list (* zero or more *)
      * Token.t (* "," *) option
    )
      option
  * Token.t (* ")" *)
)

and initializer_ = (Token.t (* "=" *) * expression)

and jsx_attribute_ = [
    `Jsx_attr of (
        jsx_attribute_name
      * (Token.t (* "=" *) * jsx_attribute_value) option
    )
  | `Jsx_exp of jsx_expression
]

and jsx_attribute_value = [
    `Str of string_
  | `Jsx_exp of jsx_expression
  | `Choice_jsx_elem of jsx_element_
  | `Jsx_frag of jsx_fragment
]

and jsx_child = [
    `Jsx_text of jsx_text (*tok*)
  | `Choice_jsx_elem of jsx_element_
  | `Jsx_frag of jsx_fragment
  | `Jsx_exp of jsx_expression
]

and jsx_element_ = [
    `Jsx_elem of (
        jsx_opening_element
      * jsx_child list (* zero or more *)
      * jsx_closing_element
    )
  | `Jsx_self_clos_elem of (
        Token.t (* "<" *)
      * jsx_element_name
      * jsx_attribute_ list (* zero or more *)
      * Token.t (* "/" *)
      * Token.t (* ">" *)
    )
]

and jsx_expression = (
    Token.t (* "{" *)
  * [
        `Exp of expression
      | `Seq_exp of sequence_expression
      | `Spread_elem of spread_element
    ]
      option
  * Token.t (* "}" *)
)

and jsx_fragment = (
    Token.t (* "<" *)
  * Token.t (* ">" *)
  * jsx_child list (* zero or more *)
  * Token.t (* "<" *)
  * Token.t (* "/" *)
  * Token.t (* ">" *)
)

and jsx_opening_element = (
    Token.t (* "<" *)
  * jsx_element_name
  * jsx_attribute_ list (* zero or more *)
  * Token.t (* ">" *)
)

and lexical_declaration = (
    anon_choice_let_ca16eb3
  * variable_declarator
  * (Token.t (* "," *) * variable_declarator) list (* zero or more *)
  * semicolon
)

and lhs_expression = [
    `Member_exp of member_expression
  | `Subs_exp of subscript_expression
  | `Choice_unde of identifier_
  | `Choice_get of reserved_identifier
  | `Dest_pat of destructuring_pattern
]

and member_expression = (
    anon_choice_exp_9cd0ed5
  * [ `DOT of Token.t (* "." *) | `QMARKDOT of Token.t (* "?." *) ]
  * [
        `Priv_prop_id of private_property_identifier (*tok*)
      | `Id of identifier (*tok*)
    ]
)

and method_definition = (
    decorator list (* zero or more *)
  * Token.t (* "static" *) option
  * Token.t (* "async" *) option
  * [
        `Get of Token.t (* "get" *)
      | `Set of Token.t (* "set" *)
      | `STAR of Token.t (* "*" *)
    ]
      option
  * property_name
  * call_signature
  * statement_block
)

and new_expression = (
    Token.t (* "new" *)
  * [ `Prim_exp of primary_expression | `New_exp of new_expression ]
  * arguments option
)

and parenthesized_expression = (
    Token.t (* "(" *) * expressions * Token.t (* ")" *)
)

and pattern = [
    `Choice_member_exp of lhs_expression
  | `Rest_pat of rest_pattern
]

and primary_expression = [
    `Subs_exp of subscript_expression
  | `Member_exp of member_expression
  | `Paren_exp of parenthesized_expression
  | `Choice_unde of identifier_
  | `Choice_get of reserved_identifier
  | `This of Token.t (* "this" *)
  | `Super of Token.t (* "super" *)
  | `Num of number (*tok*)
  | `Str of string_
  | `Temp_str of template_string
  | `Regex of (
        Token.t (* "/" *)
      * regex_pattern (*tok*)
      * imm_tok_slash (*tok*)
      * regex_flags (*tok*) option
    )
  | `True of Token.t (* "true" *)
  | `False of Token.t (* "false" *)
  | `Null of Token.t (* "null" *)
  | `Import of import (*tok*)
  | `Obj of (
        Token.t (* "{" *)
      * (
            anon_choice_pair_20c9acd option
          * (Token.t (* "," *) * anon_choice_pair_20c9acd option)
              list (* zero or more *)
        )
          option
      * Token.t (* "}" *)
    )
  | `Array of (
        Token.t (* "[" *)
      * anon_opt_opt_choice_exp_rep_COMMA_opt_choice_exp_208ebb4
      * Token.t (* "]" *)
    )
  | `Func of (
        Token.t (* "async" *) option
      * Token.t (* "function" *)
      * identifier (*tok*) option
      * call_signature
      * statement_block
    )
  | `Arrow_func of (
        Token.t (* "async" *) option
      * [
            `Choice_choice_get of anon_choice_rese_id_9a83200
          | `Formal_params of call_signature
        ]
      * Token.t (* "=>" *)
      * [ `Exp of expression | `Stmt_blk of statement_block ]
    )
  | `Gene_func of (
        Token.t (* "async" *) option
      * Token.t (* "function" *)
      * Token.t (* "*" *)
      * identifier (*tok*) option
      * call_signature
      * statement_block
    )
  | `Class of (
        decorator list (* zero or more *)
      * Token.t (* "class" *)
      * identifier (*tok*) option
      * class_heritage option
      * class_body
    )
  | `Meta_prop of (
        Token.t (* "new" *) * Token.t (* "." *) * Token.t (* "target" *)
    )
  | `Call_exp of call_expression
]

and property_name = [
    `Choice_id of anon_choice_id_0e3c97f
  | `Priv_prop_id of private_property_identifier (*tok*)
  | `Str of string_
  | `Num of number (*tok*)
  | `Comp_prop_name of (Token.t (* "[" *) * expression * Token.t (* "]" *))
]

and rest_pattern = (Token.t (* "..." *) * lhs_expression)

and sequence_expression = (
    expression
  * Token.t (* "," *)
  * [ `Seq_exp of sequence_expression | `Exp of expression ]
)

and spread_element = (Token.t (* "..." *) * expression)

and statement = [
    `Export_stmt of export_statement
  | `Import_stmt of (
        Token.t (* "import" *)
      * [
            `Import_clause_from_clause of (import_clause * from_clause)
          | `Str of string_
        ]
      * semicolon
    )
  | `Debu_stmt of (Token.t (* "debugger" *) * semicolon)
  | `Exp_stmt of expression_statement
  | `Decl of declaration
  | `Stmt_blk of statement_block
  | `If_stmt of (
        Token.t (* "if" *)
      * parenthesized_expression
      * statement
      * else_clause option
    )
  | `Switch_stmt of (
        Token.t (* "switch" *) * parenthesized_expression * switch_body
    )
  | `For_stmt of (
        Token.t (* "for" *)
      * Token.t (* "(" *)
      * [
            `Lexi_decl of lexical_declaration
          | `Var_decl of variable_declaration
          | `Exp_stmt of expression_statement
          | `Empty_stmt of Token.t (* ";" *)
        ]
      * [
            `Exp_stmt of expression_statement
          | `Empty_stmt of Token.t (* ";" *)
        ]
      * expressions option
      * Token.t (* ")" *)
      * statement
    )
  | `For_in_stmt of (
        Token.t (* "for" *)
      * Token.t (* "await" *) option
      * for_header
      * statement
    )
  | `While_stmt of (
        Token.t (* "while" *) * parenthesized_expression * statement
    )
  | `Do_stmt of (
        Token.t (* "do" *) * statement * Token.t (* "while" *)
      * parenthesized_expression * semicolon
    )
  | `Try_stmt of (
        Token.t (* "try" *)
      * statement_block
      * catch_clause option
      * finally_clause option
    )
  | `With_stmt of (
        Token.t (* "with" *) * parenthesized_expression * statement
    )
  | `Brk_stmt of (
        Token.t (* "break" *)
      * identifier (*tok*) option
      * semicolon
    )
  | `Cont_stmt of (
        Token.t (* "continue" *)
      * identifier (*tok*) option
      * semicolon
    )
  | `Ret_stmt of (Token.t (* "return" *) * expressions option * semicolon)
  | `Throw_stmt of (Token.t (* "throw" *) * expressions * semicolon)
  | `Empty_stmt of Token.t (* ";" *)
  | `Labe_stmt of (anon_choice_id_0e3c97f * Token.t (* ":" *) * statement)
]

and statement_block = (
    Token.t (* "{" *)
  * statement list (* zero or more *)
  * Token.t (* "}" *)
  * automatic_semicolon (*tok*) option
)

and subscript_expression = (
    anon_choice_exp_9cd0ed5
  * Token.t (* "?." *) option
  * Token.t (* "[" *)
  * expressions
  * Token.t (* "]" *)
)

and switch_body = (
    Token.t (* "{" *)
  * [ `Switch_case of switch_case | `Switch_defa of switch_default ]
      list (* zero or more *)
  * Token.t (* "}" *)
)

and switch_case = (
    Token.t (* "case" *)
  * expressions
  * Token.t (* ":" *)
  * statement list (* zero or more *)
)

and switch_default = (
    Token.t (* "default" *)
  * Token.t (* ":" *)
  * statement list (* zero or more *)
)

and template_string = (
    Token.t (* "`" *)
  * [
        `Temp_chars of template_chars (*tok*)
      | `Esc_seq of escape_sequence (*tok*)
      | `Temp_subs of template_substitution
    ]
      list (* zero or more *)
  * Token.t (* "`" *)
)

and template_substitution = (
    Token.t (* "${" *) * expressions * Token.t (* "}" *)
)

and update_expression = [
    `Exp_choice_PLUSPLUS of (expression * anon_choice_PLUSPLUS_e498e28)
  | `Choice_PLUSPLUS_exp of (anon_choice_PLUSPLUS_e498e28 * expression)
]

and variable_declaration = (
    Token.t (* "var" *)
  * variable_declarator
  * (Token.t (* "," *) * variable_declarator) list (* zero or more *)
  * semicolon
)

and variable_declarator = (anon_choice_id_940079a * initializer_ option)

type program = (
    hash_bang_line (*tok*) option
  * statement list (* zero or more *)
)

type true_ (* inlined *) = Token.t (* "true" *)

type this (* inlined *) = Token.t (* "this" *)

type false_ (* inlined *) = Token.t (* "false" *)

type empty_statement (* inlined *) = Token.t (* ";" *)

type null (* inlined *) = Token.t (* "null" *)

type comment (* inlined *) = Token.t

type undefined (* inlined *) = Token.t (* "undefined" *)

type meta_property (* inlined *) = (
    Token.t (* "new" *) * Token.t (* "." *) * Token.t (* "target" *)
)

type super (* inlined *) = Token.t (* "super" *)

type regex (* inlined *) = (
    Token.t (* "/" *)
  * regex_pattern (*tok*)
  * imm_tok_slash (*tok*)
  * regex_flags (*tok*) option
)

type break_statement (* inlined *) = (
    Token.t (* "break" *)
  * identifier (*tok*) option
  * semicolon
)

type debugger_statement (* inlined *) = (
    Token.t (* "debugger" *) * semicolon
)

type continue_statement (* inlined *) = (
    Token.t (* "continue" *)
  * identifier (*tok*) option
  * semicolon
)

type import_statement (* inlined *) = (
    Token.t (* "import" *)
  * [
        `Import_clause_from_clause of (import_clause * from_clause)
      | `Str of string_
    ]
  * semicolon
)

type array_ (* inlined *) = (
    Token.t (* "[" *)
  * anon_opt_opt_choice_exp_rep_COMMA_opt_choice_exp_208ebb4
  * Token.t (* "]" *)
)

type array_pattern (* inlined *) = (
    Token.t (* "[" *)
  * (
        formal_parameter option
      * (Token.t (* "," *) * formal_parameter option) list (* zero or more *)
    )
      option
  * Token.t (* "]" *)
)

type arrow_function (* inlined *) = (
    Token.t (* "async" *) option
  * [
        `Choice_choice_get of anon_choice_rese_id_9a83200
      | `Formal_params of call_signature
    ]
  * Token.t (* "=>" *)
  * [ `Exp of expression | `Stmt_blk of statement_block ]
)

type assignment_expression (* inlined *) = (
    [
        `Paren_exp of parenthesized_expression
      | `Choice_member_exp of lhs_expression
    ]
  * Token.t (* "=" *)
  * expression
)

type assignment_pattern (* inlined *) = (
    pattern * Token.t (* "=" *) * expression
)

type augmented_assignment_expression (* inlined *) = (
    augmented_assignment_lhs
  * [
        `PLUSEQ of Token.t (* "+=" *)
      | `DASHEQ of Token.t (* "-=" *)
      | `STAREQ of Token.t (* "*=" *)
      | `SLASHEQ of Token.t (* "/=" *)
      | `PERCEQ of Token.t (* "%=" *)
      | `HATEQ of Token.t (* "^=" *)
      | `AMPEQ of Token.t (* "&=" *)
      | `BAREQ of Token.t (* "|=" *)
      | `GTGTEQ of Token.t (* ">>=" *)
      | `GTGTGTEQ of Token.t (* ">>>=" *)
      | `LTLTEQ of Token.t (* "<<=" *)
      | `STARSTAREQ of Token.t (* "**=" *)
      | `AMPAMPEQ of Token.t (* "&&=" *)
      | `BARBAREQ of Token.t (* "||=" *)
      | `QMARKQMARKEQ of Token.t (* "??=" *)
    ]
  * expression
)

type await_expression (* inlined *) = (Token.t (* "await" *) * expression)

type class_ (* inlined *) = (
    decorator list (* zero or more *)
  * Token.t (* "class" *)
  * identifier (*tok*) option
  * class_heritage option
  * class_body
)

type class_declaration (* inlined *) = (
    decorator list (* zero or more *)
  * Token.t (* "class" *)
  * identifier (*tok*)
  * class_heritage option
  * class_body
  * automatic_semicolon (*tok*) option
)

type computed_property_name (* inlined *) = (
    Token.t (* "[" *) * expression * Token.t (* "]" *)
)

type do_statement (* inlined *) = (
    Token.t (* "do" *) * statement * Token.t (* "while" *)
  * parenthesized_expression * semicolon
)

type for_in_statement (* inlined *) = (
    Token.t (* "for" *)
  * Token.t (* "await" *) option
  * for_header
  * statement
)

type for_statement (* inlined *) = (
    Token.t (* "for" *)
  * Token.t (* "(" *)
  * [
        `Lexi_decl of lexical_declaration
      | `Var_decl of variable_declaration
      | `Exp_stmt of expression_statement
      | `Empty_stmt of Token.t (* ";" *)
    ]
  * [ `Exp_stmt of expression_statement | `Empty_stmt of Token.t (* ";" *) ]
  * expressions option
  * Token.t (* ")" *)
  * statement
)

type function_ (* inlined *) = (
    Token.t (* "async" *) option
  * Token.t (* "function" *)
  * identifier (*tok*) option
  * call_signature
  * statement_block
)

type function_declaration (* inlined *) = (
    Token.t (* "async" *) option
  * Token.t (* "function" *)
  * identifier (*tok*)
  * call_signature
  * statement_block
  * automatic_semicolon (*tok*) option
)

type generator_function (* inlined *) = (
    Token.t (* "async" *) option
  * Token.t (* "function" *)
  * Token.t (* "*" *)
  * identifier (*tok*) option
  * call_signature
  * statement_block
)

type generator_function_declaration (* inlined *) = (
    Token.t (* "async" *) option
  * Token.t (* "function" *)
  * Token.t (* "*" *)
  * identifier (*tok*)
  * call_signature
  * statement_block
  * automatic_semicolon (*tok*) option
)

type if_statement (* inlined *) = (
    Token.t (* "if" *)
  * parenthesized_expression
  * statement
  * else_clause option
)

type jsx_attribute (* inlined *) = (
    jsx_attribute_name
  * (Token.t (* "=" *) * jsx_attribute_value) option
)

type jsx_element (* inlined *) = (
    jsx_opening_element
  * jsx_child list (* zero or more *)
  * jsx_closing_element
)

type jsx_self_closing_element (* inlined *) = (
    Token.t (* "<" *)
  * jsx_element_name
  * jsx_attribute_ list (* zero or more *)
  * Token.t (* "/" *)
  * Token.t (* ">" *)
)

type labeled_statement (* inlined *) = (
    anon_choice_id_0e3c97f * Token.t (* ":" *) * statement
)

type object_ (* inlined *) = (
    Token.t (* "{" *)
  * (
        anon_choice_pair_20c9acd option
      * (Token.t (* "," *) * anon_choice_pair_20c9acd option)
          list (* zero or more *)
    )
      option
  * Token.t (* "}" *)
)

type object_assignment_pattern (* inlined *) = (
    [
        `Choice_choice_get of anon_choice_rese_id_9a83200
      | `Dest_pat of destructuring_pattern
    ]
  * Token.t (* "=" *)
  * expression
)

type object_pattern (* inlined *) = (
    Token.t (* "{" *)
  * (
        anon_choice_pair_pat_3ff9cbe option
      * (Token.t (* "," *) * anon_choice_pair_pat_3ff9cbe option)
          list (* zero or more *)
    )
      option
  * Token.t (* "}" *)
)

type pair (* inlined *) = (property_name * Token.t (* ":" *) * expression)

type pair_pattern (* inlined *) = (
    property_name * Token.t (* ":" *) * formal_parameter
)

type return_statement (* inlined *) = (
    Token.t (* "return" *)
  * expressions option
  * semicolon
)

type switch_statement (* inlined *) = (
    Token.t (* "switch" *) * parenthesized_expression * switch_body
)

type ternary_expression (* inlined *) = (
    expression * ternary_qmark (*tok*) * expression * Token.t (* ":" *)
  * expression
)

type throw_statement (* inlined *) = (
    Token.t (* "throw" *) * expressions * semicolon
)

type try_statement (* inlined *) = (
    Token.t (* "try" *)
  * statement_block
  * catch_clause option
  * finally_clause option
)

type unary_expression (* inlined *) = (
    [
        `BANG of Token.t (* "!" *)
      | `TILDE of Token.t (* "~" *)
      | `DASH of Token.t (* "-" *)
      | `PLUS of Token.t (* "+" *)
      | `Typeof of Token.t (* "typeof" *)
      | `Void of Token.t (* "void" *)
      | `Delete of Token.t (* "delete" *)
    ]
  * expression
)

type while_statement (* inlined *) = (
    Token.t (* "while" *) * parenthesized_expression * statement
)

type with_statement (* inlined *) = (
    Token.t (* "with" *) * parenthesized_expression * statement
)

type yield_expression (* inlined *) = (
    Token.t (* "yield" *)
  * [
        `STAR_exp of (Token.t (* "*" *) * expression)
      | `Opt_exp of expression option
    ]
)

type extra = Comment of Loc.t * comment

type extras = extra list
